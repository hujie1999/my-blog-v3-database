-- MySQL dump 10.13  Distrib 8.0.30, for Win64 (x86_64)
--
-- Host: localhost    Database: my_blog
-- ------------------------------------------------------
-- Server version	8.0.30

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `about`
--

DROP TABLE IF EXISTS `about`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `about` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `About_Tittle` varchar(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `About_Content` text CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `About_Status` int NOT NULL DEFAULT '1',
  `About_Img` text CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `About_Createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `About_Updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `about`
--

LOCK TABLES `about` WRITE;
/*!40000 ALTER TABLE `about` DISABLE KEYS */;
INSERT INTO `about` VALUES (1,'About Me','![ani2.jpg](https://www.xiaohai-learn.pub/image/aboutimgs/lLVG1gQmLY-ani2.jpg)\n#### 简介\n\n```javascript\nconst introduction = {\n	Name: \'小海\',\n	Birthday: \'1999.10\',\n	Hobbies: \'movie,music,coding,game,deliciousFood\',\n	Character: \'humorous,outgoing\',\n	PlaceOfLiving: \'成都\'\n}\n\nconst skills = {\n	UIFramework: \'BootStrap,ElementUI,Mui\',\n	Basic: \'Javascript,HTML5,CSS3,ES5,6\',\n	Visualization: \'ECharts\',\n	WebFramework: \'Vue2,VueCLI\',\n	MobileFramework: \'Uni-app\',\n	Packaging: \'Webpack4\',\n	Serverside: \'NodeJs,Express\',\n	Database: \'MySQL,SqlServer\',\n	NetWork: \'Http,WebSocket\'\n}\n\nconst connection = {\n	Email: \'1256215927@qq.com\',\n	Github: \'https://github.com/hujie1999\'\n}\n\n//...\n\n```',1,'/aboutimgs/lLVG1gQmLY-ani2.jpg,','2022-03-12 18:58:25','2022-06-13 15:28:29');
/*!40000 ALTER TABLE `about` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `admin_table`
--

DROP TABLE IF EXISTS `admin_table`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `admin_table` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Admin_UniqueId` char(20) NOT NULL,
  `Admin_Nickname` char(15) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Admin_Account` char(15) NOT NULL,
  `Admin_Password` char(20) NOT NULL,
  `Admin_Status` int NOT NULL DEFAULT '1',
  `Admin_Examined` int NOT NULL DEFAULT '0',
  `Admin_Role` char(10) NOT NULL,
  `Admin_Email` char(30) NOT NULL,
  `Admin_PhoneNumber` char(14) NOT NULL,
  `Admin_Introduction` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Admin_CreateTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Admin_UpdateTime` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `admin_table`
--

LOCK TABLES `admin_table` WRITE;
/*!40000 ALTER TABLE `admin_table` DISABLE KEYS */;
INSERT INTO `admin_table` VALUES (1,'22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','123456',1,1,'Admin','qwer','18282727137','Hi~大家好，我是小海，很高兴见到各位.','2022-03-07 12:58:44','2022-08-26 14:08:42'),(2,'Qe83s2xQRrtcppfY','xiaohong','editor01','myblogv3admin',1,1,'Editor','qwer','17378586829','大家好，我是编辑者01','2022-03-07 15:44:36','2022-04-15 13:29:55'),(3,'tGeXOI6snN5BDf92','xiaoming','editor02','123456',1,2,'Editor','qwer','17378586829','大家好，我是编辑者02','2022-03-07 15:45:55','2022-03-20 10:31:57'),(4,'fdca9eH7hIA8bb1B','浏览者1','viewer01','myblogv3admin',1,1,'Viewer','qwer','17378586829','大家好，我是浏览者1','2022-03-07 15:46:58','2022-04-15 13:29:50'),(5,'XM0R99PuwQoFV3T9','管理员测试01','admintester01','myblogv3admin',1,1,'Editor','123@qq.com','10000','0.0','2022-04-08 07:06:04','2022-04-15 13:29:43');
/*!40000 ALTER TABLE `admin_table` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `admin_table_right`
--

DROP TABLE IF EXISTS `admin_table_right`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `admin_table_right` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Admin_Is_Creator` int NOT NULL DEFAULT '0',
  `Admin_Role` char(10) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Admin_Tab_List` text CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Admin_Right_List` text CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Admin_Role_Id` char(20) NOT NULL,
  `Admin_Role_Status` int NOT NULL DEFAULT '1',
  `Admin_Role_CreateTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Admin_Role_UpdateTime` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `admin_table_right`
--

LOCK TABLES `admin_table_right` WRITE;
/*!40000 ALTER TABLE `admin_table_right` DISABLE KEYS */;
INSERT INTO `admin_table_right` VALUES (1,1,'Admin','0%5Bidx%5D=0&0%5Btitle%5D=DashBoard&0%5Bclass%5D=el-icon-s-grid&0%5Bpath%5D=%2Fdashboard&1%5Bidx%5D=1&1%5Btitle%5D=%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2&1%5Bclass%5D=el-icon-upload&1%5Bpath%5D=%2Fpublishblog&2%5Bidx%5D=2&2%5Btitle%5D=%E5%8D%9A%E5%AE%A2%E7%AE%A1%E7%90%86&2%5Bclass%5D=el-icon-s-order&2%5Bpath%5D=%2Fmanageblog&3%5Bidx%5D=3&3%5Btitle%5D=%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86&3%5Bclass%5D=el-icon-s-comment&3%5Bpath%5D=%2Fmanagecomment&3%5Bchild%5D%5B0%5D%5Bidx%5D=7&3%5Bchild%5D%5B0%5D%5Btitle%5D=%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86&3%5Bchild%5D%5B0%5D%5Bpath%5D=%2Fmanagecomment%2Fblogcomment&3%5Bchild%5D%5B1%5D%5Bidx%5D=8&3%5Bchild%5D%5B1%5D%5Btitle%5D=%E7%95%99%E8%A8%80%E6%9D%BF%E7%95%99%E8%A8%80%E7%AE%A1%E7%90%86&3%5Bchild%5D%5B1%5D%5Bpath%5D=%2Fmanagecomment%2Fmessagecomment&3%5Bchild%5D%5B2%5D%5Bidx%5D=9&3%5Bchild%5D%5B2%5D%5Btitle%5D=%E8%AF%84%E8%AE%BA%E5%AE%A1%E6%A0%B8&3%5Bchild%5D%5B2%5D%5Bpath%5D=%2Fmanagecomment%2Fexaminecomment&4%5Bidx%5D=4&4%5Btitle%5D=%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86&4%5Bclass%5D=el-icon-user-solid&4%5Bpath%5D=%2Fmanageuser&4%5Bchild%5D%5B0%5D%5Bidx%5D=10&4%5Bchild%5D%5B0%5D%5Btitle%5D=%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86&4%5Bchild%5D%5B0%5D%5Bpath%5D=%2Fmanageuser%2Fmanagenormaluser&4%5Bchild%5D%5B1%5D%5Bidx%5D=11&4%5Bchild%5D%5B1%5D%5Btitle%5D=%E7%AE%A1%E7%90%86%E5%91%98%E7%AE%A1%E7%90%86&4%5Bchild%5D%5B1%5D%5Bpath%5D=%2Fmanageuser%2Fmanageadminuser&4%5Bchild%5D%5B2%5D%5Bidx%5D=12&4%5Bchild%5D%5B2%5D%5Btitle%5D=%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%AE%A1%E6%A0%B8&4%5Bchild%5D%5B2%5D%5Bpath%5D=%2Fmanageuser%2Fexamineuserandadmin&4%5Bchild%5D%5B3%5D%5Bidx%5D=13&4%5Bchild%5D%5B3%5D%5Btitle%5D=%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7&4%5Bchild%5D%5B3%5D%5Bpath%5D=%2Fmanageuser%2Fadduseroradmin&5%5Bidx%5D=5&5%5Btitle%5D=%E7%BD%91%E7%AB%99%E7%AE%A1%E7%90%86&5%5Bclass%5D=el-icon-s-marketing&5%5Bpath%5D=%2Fmanagewebsite&5%5Bchild%5D%5B0%5D%5Bidx%5D=14&5%5Bchild%5D%5B0%5D%5Btitle%5D=%E5%8D%9A%E5%AE%A2%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B0%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanagetag&5%5Bchild%5D%5B1%5D%5Bidx%5D=15&5%5Bchild%5D%5B1%5D%5Btitle%5D=%E5%8D%9A%E5%AE%A2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B1%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanageclass&5%5Bchild%5D%5B2%5D%5Bidx%5D=16&5%5Bchild%5D%5B2%5D%5Btitle%5D=%E5%85%B3%E4%BA%8E%E9%A1%B5%E9%9D%A2%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B2%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanageaboutpage&5%5Bchild%5D%5B3%5D%5Bidx%5D=17&5%5Bchild%5D%5B3%5D%5Btitle%5D=%E7%95%99%E8%A8%80%E6%9D%BF%E9%A1%B5%E9%9D%A2%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B3%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanagemessagepage&5%5Bchild%5D%5B4%5D%5Bidx%5D=18&5%5Bchild%5D%5B4%5D%5Btitle%5D=%E7%BD%91%E7%AB%99%E8%83%8C%E6%99%AF%E5%9B%BE%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B4%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanagebackgroundimg&5%5Bchild%5D%5B5%5D%5Bidx%5D=19&5%5Bchild%5D%5B5%5D%5Btitle%5D=%E5%A4%B4%E5%83%8F%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B5%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanageavatar&5%5Bchild%5D%5B6%5D%5Bidx%5D=20&5%5Bchild%5D%5B6%5D%5Btitle%5D=%E5%B9%BF%E5%91%8A%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B6%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanageadvertisement&6%5Bidx%5D=6&6%5Btitle%5D=%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86&6%5Bclass%5D=el-icon-warning&6%5Bpath%5D=%2Fmanageprivilege','','ABCD-EFGH-IJKLM-NOPQ',1,'2022-03-09 16:38:46','2022-04-14 08:35:43'),(2,0,'Editor','0%5Bidx%5D=1&0%5Btitle%5D=%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2&0%5Bclass%5D=el-icon-upload&0%5Bpath%5D=%2Fpublishblog&1%5Bidx%5D=3&1%5Btitle%5D=%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86&1%5Bclass%5D=el-icon-s-comment&1%5Bpath%5D=%2Fmanagecomment&1%5Bchild%5D%5B0%5D%5Bidx%5D=7&1%5Bchild%5D%5B0%5D%5Btitle%5D=%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86&1%5Bchild%5D%5B0%5D%5Bpath%5D=%2Fmanagecomment%2Fblogcomment&1%5Bchild%5D%5B1%5D%5Bidx%5D=8&1%5Bchild%5D%5B1%5D%5Btitle%5D=%E7%95%99%E8%A8%80%E6%9D%BF%E7%95%99%E8%A8%80%E7%AE%A1%E7%90%86&1%5Bchild%5D%5B1%5D%5Bpath%5D=%2Fmanagecomment%2Fmessagecomment&1%5Bchild%5D%5B2%5D%5Bidx%5D=9&1%5Bchild%5D%5B2%5D%5Btitle%5D=%E8%AF%84%E8%AE%BA%E5%AE%A1%E6%A0%B8&1%5Bchild%5D%5B2%5D%5Bpath%5D=%2Fmanagecomment%2Fexaminecomment&2%5Bidx%5D=4&2%5Btitle%5D=%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86&2%5Bclass%5D=el-icon-user-solid&2%5Bpath%5D=%2Fmanageuser&2%5Bchild%5D%5B0%5D%5Bidx%5D=10&2%5Bchild%5D%5B0%5D%5Btitle%5D=%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86&2%5Bchild%5D%5B0%5D%5Bpath%5D=%2Fmanageuser%2Fmanagenormaluser&2%5Bchild%5D%5B2%5D%5Bidx%5D=12&2%5Bchild%5D%5B2%5D%5Btitle%5D=%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%AE%A1%E6%A0%B8&2%5Bchild%5D%5B2%5D%5Bpath%5D=%2Fmanageuser%2Fexamineuserandadmin','','ONET-WOTH-REEF-OUTF',1,'2022-03-09 16:40:17','2022-03-25 21:32:39'),(3,0,'Viewer','0%5Bidx%5D=0&0%5Btitle%5D=DashBoard&0%5Bclass%5D=el-icon-s-grid&0%5Bpath%5D=%2Fdashboard&1%5Bidx%5D=1&1%5Btitle%5D=%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2&1%5Bclass%5D=el-icon-upload&1%5Bpath%5D=%2Fpublishblog&2%5Bidx%5D=2&2%5Btitle%5D=%E5%8D%9A%E5%AE%A2%E7%AE%A1%E7%90%86&2%5Bclass%5D=el-icon-s-order&2%5Bpath%5D=%2Fmanageblog&3%5Bidx%5D=3&3%5Btitle%5D=%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86&3%5Bclass%5D=el-icon-s-comment&3%5Bpath%5D=%2Fmanagecomment&3%5Bchild%5D%5B0%5D%5Bidx%5D=7&3%5Bchild%5D%5B0%5D%5Btitle%5D=%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86&3%5Bchild%5D%5B0%5D%5Bpath%5D=%2Fmanagecomment%2Fblogcomment&3%5Bchild%5D%5B1%5D%5Bidx%5D=8&3%5Bchild%5D%5B1%5D%5Btitle%5D=%E7%95%99%E8%A8%80%E6%9D%BF%E7%95%99%E8%A8%80%E7%AE%A1%E7%90%86&3%5Bchild%5D%5B1%5D%5Bpath%5D=%2Fmanagecomment%2Fmessagecomment&3%5Bchild%5D%5B2%5D%5Bidx%5D=9&3%5Bchild%5D%5B2%5D%5Btitle%5D=%E8%AF%84%E8%AE%BA%E5%AE%A1%E6%A0%B8&3%5Bchild%5D%5B2%5D%5Bpath%5D=%2Fmanagecomment%2Fexaminecomment&4%5Bidx%5D=4&4%5Btitle%5D=%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86&4%5Bclass%5D=el-icon-user-solid&4%5Bpath%5D=%2Fmanageuser&4%5Bchild%5D%5B0%5D%5Bidx%5D=10&4%5Bchild%5D%5B0%5D%5Btitle%5D=%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86&4%5Bchild%5D%5B0%5D%5Bpath%5D=%2Fmanageuser%2Fmanagenormaluser&4%5Bchild%5D%5B1%5D%5Bidx%5D=11&4%5Bchild%5D%5B1%5D%5Btitle%5D=%E7%AE%A1%E7%90%86%E5%91%98%E7%AE%A1%E7%90%86&4%5Bchild%5D%5B1%5D%5Bpath%5D=%2Fmanageuser%2Fmanageadminuser&4%5Bchild%5D%5B2%5D%5Bidx%5D=12&4%5Bchild%5D%5B2%5D%5Btitle%5D=%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%AE%A1%E6%A0%B8&4%5Bchild%5D%5B2%5D%5Bpath%5D=%2Fmanageuser%2Fexamineuserandadmin&4%5Bchild%5D%5B3%5D%5Bidx%5D=13&4%5Bchild%5D%5B3%5D%5Btitle%5D=%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7&4%5Bchild%5D%5B3%5D%5Bpath%5D=%2Fmanageuser%2Fadduseroradmin&5%5Bidx%5D=5&5%5Btitle%5D=%E7%BD%91%E7%AB%99%E7%AE%A1%E7%90%86&5%5Bclass%5D=el-icon-s-marketing&5%5Bpath%5D=%2Fmanagewebsite&5%5Bchild%5D%5B0%5D%5Bidx%5D=14&5%5Bchild%5D%5B0%5D%5Btitle%5D=%E5%8D%9A%E5%AE%A2%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B0%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanagetag&5%5Bchild%5D%5B1%5D%5Bidx%5D=15&5%5Bchild%5D%5B1%5D%5Btitle%5D=%E5%8D%9A%E5%AE%A2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B1%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanageclass&5%5Bchild%5D%5B2%5D%5Bidx%5D=16&5%5Bchild%5D%5B2%5D%5Btitle%5D=%E5%85%B3%E4%BA%8E%E9%A1%B5%E9%9D%A2%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B2%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanageaboutpage&5%5Bchild%5D%5B3%5D%5Bidx%5D=17&5%5Bchild%5D%5B3%5D%5Btitle%5D=%E7%95%99%E8%A8%80%E6%9D%BF%E9%A1%B5%E9%9D%A2%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B3%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanagemessagepage&5%5Bchild%5D%5B4%5D%5Bidx%5D=18&5%5Bchild%5D%5B4%5D%5Btitle%5D=%E7%BD%91%E7%AB%99%E8%83%8C%E6%99%AF%E5%9B%BE%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B4%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanagebackgroundimg&5%5Bchild%5D%5B5%5D%5Bidx%5D=19&5%5Bchild%5D%5B5%5D%5Btitle%5D=%E5%A4%B4%E5%83%8F%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B5%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanageavatar&5%5Bchild%5D%5B6%5D%5Bidx%5D=20&5%5Bchild%5D%5B6%5D%5Btitle%5D=%E5%B9%BF%E5%91%8A%E7%AE%A1%E7%90%86&5%5Bchild%5D%5B6%5D%5Bpath%5D=%2Fmanagewebsite%2Fmanageadvertisement&6%5Bidx%5D=6&6%5Btitle%5D=%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86&6%5Bclass%5D=el-icon-warning&6%5Bpath%5D=%2Fmanageprivilege','','bpmf-gkhj-qxiv-eaoo',0,'2022-03-11 14:51:58','2022-05-13 05:18:05');
/*!40000 ALTER TABLE `admin_table_right` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `advertisement`
--

DROP TABLE IF EXISTS `advertisement`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `advertisement` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Adv_Tittle` char(30) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Adv_Introduction` varchar(500) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Adv_Img_Link_Url` varchar(500) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Adv_Createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Adv_Updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `advertisement`
--

LOCK TABLES `advertisement` WRITE;
/*!40000 ALTER TABLE `advertisement` DISABLE KEYS */;
INSERT INTO `advertisement` VALUES (1,'广告位招租 :)','Hello World ~','https://www.xiaohai-learn.pub/image/blogimgs/Xl9c667Ddx-adv.jpeg*https://www.baidu.com','2022-04-14 09:33:40','2022-06-24 07:06:52');
/*!40000 ALTER TABLE `advertisement` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blogs`
--

DROP TABLE IF EXISTS `blogs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `blogs` (
  `Blog_Id` int NOT NULL AUTO_INCREMENT,
  `Blog_Title` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Blog_SummaryImg` char(150) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Blog_Summary` text CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Blog_Content` mediumtext CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Blog_Tags` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Blog_Class` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Blog_Likes` int NOT NULL,
  `Blog_Views` int NOT NULL,
  `Blog_Collected` int NOT NULL,
  `Blog_Comments` int NOT NULL,
  `Blog_Author_Role` char(10) NOT NULL,
  `Blog_Author_UniqueId` char(20) NOT NULL,
  `Blog_Author` char(15) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Blog_Author_Account` char(15) NOT NULL,
  `Blog_Author_Avatar` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Blog_Imgs` varchar(5000) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Blog_Status` int NOT NULL DEFAULT '1',
  `Blog_Createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Blog_Updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Blog_Id`)
) ENGINE=InnoDB AUTO_INCREMENT=10021 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blogs`
--

LOCK TABLES `blogs` WRITE;
/*!40000 ALTER TABLE `blogs` DISABLE KEYS */;
INSERT INTO `blogs` VALUES (10000,'广告图床','/blogimgs/Xl9c667Ddx-adv.jpeg,','广告图床保存非链接的广告图片\n1. ![adv.jpeg](https://www.xiaohai-learn.pub/image/blogimgs/Xl9c667Ddx-adv.jpeg)','广告图床保存非链接的广告图片\n1. ![sunset.jpg](https://www.xiaohai-learn.pub/image/blogimgs/LQ1lP8cQb3-sunset.jpg)\n','JavaScript','总结',58,327,10,1,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',2,'2020-12-28 00:16:14','2022-08-26 14:16:03'),(10001,'2测试博客标题2','','----\n\n### 列表 Lists\n#### 无序列表（加号和嵌套）Unordered Lists (+)\n                \n+ 列表一\n+ 列表二\n    + 列表二-1\n    + 列表二-2\n    + 列表二-3\n+ 列表三\n    * 列表一\n    * 列表二\n    * 列表三','测试博客内容2（修改测试Blog_Updatetime时间戳是否正常）','Nodejs,React','技术帖',70,163,13,0,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',2,'2020-12-28 00:16:31','2022-08-26 14:16:03'),(10002,'3博客标题测试更新测试','','---- #### 有序列表 Ordered Lists (-)                  1. 第一行 2. 第二行 3. 第三行  #### GFM task list  - [x] GFM task list 1 - [x] GFM task list 2 - [ ] GFM task list 3     - [ ] GFM task list 3-1     - [ ] GFM task list 3-2     - [ ] GFM task list 3-3 - [ ] GFM task list 4     - [ ] GFM task list 4-1     - [ ] GFM task list 4-2                 ','---- \r\n#### 有序列表 Ordered Lists (-)                  \r\n1. 第一行 \r\n2. 第二行 \r\n3. 第三行  \r\n#### GFM task list  - [x] GFM task list \r\n1 - [x] GFM task list \r\n2 - [ ] GFM task list \r\n3     - [ ] GFM task list \r\n3-1     - [ ] GFM task list \r\n3-2     - [ ] GFM task list \r\n3-3 - [ ] GFM task list \r\n4     - [ ] GFM task list \r\n4-1     - [ ] GFM task list \r\n4-2                  \r\n----','Vue,Java','随笔',48,132,6,0,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',2,'2020-12-28 00:21:45','2022-08-26 14:16:03'),(10003,'4博客标题更新测试5','','----\r\n                    \r\n### 绘制表格 Tables\r\n\r\n| 项目        | 价格   |  数量  |\r\n| --------   | -----:  | :----:  |\r\n| 计算机      | $1600   |   5     |\r\n| 手机        |   $12   |   12   |\r\n| 管线        |    $1    |  234  |\r\n                    \r\nFirst Header  | Second Header\r\n------------- | -------------\r\nContent Cell  | Content Cell\r\nContent Cell  | Content Cell \r\n\r\n| First Header  | Second Header |\r\n| ------------- | ------------- |\r\n| Content Cell  | Content Cell  |\r\n| Content Cell  | Content Cell  |\r\n\r\n| Function name | Description                    |\r\n| ------------- | ------------------------------ |\r\n| `help()`      | Display the help window.       |\r\n| `destroy()`   | **Destroy your computer!**     |\r\n\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| col 3 is      | some wordy text | $1600 |\r\n| col 2 is      | centered        |   $12 |\r\n| zebra stripes | are neat        |    $1 |\r\n\r\n| Item      | Value |\r\n| --------- | -----:|\r\n| Computer  | $1600 |\r\n| Phone     |   $12 |\r\n| Pipe      |    $1 |\r\n                \r\n----\r\n','博客内容测试4\n','React,Python,Java','技术帖',8,38,0,0,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',2,'2020-12-28 00:21:59','2022-08-26 14:16:03'),(10004,'WebSocket实现简单的聊天室(原生js)','/blogimgs/ap7d1W24cd-code5.jpg,','WebSocket之前只是了解一点，现在行业趋势是必须要掌握它，http在某些地方有局限性，因此使用WebSocket实现了一个简单的聊天室，即是巩固，也是练习，其他功能按照思路继续写就可以。。\n![code5.jpg](https://www.xiaohai-learn.pub/image/blogimgs/ap7d1W24cd-code5.jpg)','**须知**\n\n1. [WebSocket](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket)\n2. [WebSocket 详解](https://juejin.cn/post/6989539483695710215#heading-22)\n3. [使用ws模块实现Node版WebSocket服务器](https://zhuanlan.zhihu.com/p/32725628)\n4. [websockets / ws](https://github.com/websockets/ws)\n\n网上还有很多相关资料，这里不赘述了..\n\n2022.05.17\n之前版本有一些没解决的问题，我完善了一下，加入了\n1. 客户端心跳检测重连\n2. 服务器断线或者错误重连\n3. 服务器定时清除未正常断开连接的客户端\n4. 以及ping pong检测客户端是否掉线后发布通知\n \n\n\n### 正文\n\n*只放关键的代码*\n\n前台\n\n```javascript\n//chat.js\n\n((doc,window)=>{\n    const oList = doc.querySelector(\'#list\')\n    const oMsg = doc.querySelector(\'#message\')\n    const oSendBtn = doc.querySelector(\'#sendbtn\')\n\n    \n    const oTarget = doc.querySelector(\'#target\')\n    const oPrivate = doc.querySelector(\'#private\')\n    const oOnLineList = doc.querySelector(\'#onlineList\')\n    const oSendPrivateBtn = doc.querySelector(\'#send_private_btn\')\n    //实例\n    let ws = null\n    //用户信息\n    let username = \'\'\n    const userid = new Date().getTime()\n\n    //连接正常标识\n    let isConnectionSuccess = false\n\n    \n\n    const init = ()=>{\n        ws = new window.WebSocket(\'ws://127.0.0.1:8000\')\n        bindEvent()\n    }\n    const bindEvent = ()=>{\n        oSendBtn.addEventListener(\'click\',handleSendBtnClick,false)\n        oSendPrivateBtn.addEventListener(\'click\',handleSendPrivateBtnClick,false)\n        ws.addEventListener(\'open\',handleOpen,false)\n        ws.addEventListener(\'close\',hadnleClose,false)\n        ws.addEventListener(\'error\',handleError,false)\n        ws.addEventListener(\'message\',handleMessage,false)\n        window.addEventListener(\'beforeunload\',handleExit,false)\n    }\n    \n    const handleSendBtnClick = (e)=>{\n        const msg = oMsg.value;\n        if(!msg.split(\' \').join(\'\').length){\n            alert(\'内容为空，重新输入\')\n            return\n        }\n        ws.send(JSON.stringify({\n            userid:userid,\n            username: username,\n            dataTime: new window.Date().getTime(),\n            message: msg,\n            eventName: \'public\'\n        }))\n\n        oMsg.value = \'\'\n        // console.log(\'Send message\',e);\n    }\n\n    const handleSendPrivateBtnClick = ()=>{\n        const privMsg = oPrivate.value\n        const to = oTarget.value\n        if(!privMsg.split(\' \').join(\'\').length){\n            alert(\'内容为空，重新输入\')\n            return\n        }\n        if(!to.split(\' \').join(\'\').length){\n            alert(\'请输入收信人id\')\n            return\n        }\n        ws.send(JSON.stringify({\n            userid:userid,\n            username: username,\n            dataTime: new window.Date().getTime(),\n            message: privMsg,\n            eventName: \'private\',\n            to: to\n        }))\n    }\n    const handleOpen = (e)=>{\n        console.log(\'WebSocket open\',e);\n        //连接成功\n        isConnectionSuccess = true\n        reConnectedAndHealLog()\n        //开启心跳\n        // heartBeatReset()\n        // heartBeatStart()\n        username = window.localStorage.getItem(\'username\')\n        if(!username){\n            window.location.href = \'entry.html\'\n            return\n        }\n        \n        const initinfo = {\n            userid:userid,\n            username:username,\n            eventName: \'onLine\'\n        }\n        ws.send(JSON.stringify(initinfo))\n    }\n    const hadnleClose = (e)=>{\n        console.log(\'服务器断开连接 WebSocket close\',e);\n        isConnectionSuccess = false\n        ws = null\n        reConnection()\n    }\n    const handleError = (e)=>{\n        console.log(\'WebSocket error\',e);\n        isConnectionSuccess = false\n        ws = null\n        reConnection()\n    }\n    const handleExit = () =>{\n        ws.send(JSON.stringify({\n            userid: userid,\n            username: username,\n            eventName: \'outLine\'\n        }))\n        ws.close()\n    }\n    const handleMessage = (e)=>{\n        // console.log(\'WebSocket message\',e);\n        const msgData = JSON.parse(e.data)\n\n        heartBeatReset()\n        heartBeatStart()\n        console.log(msgData)\n        if(msgData.eventName==\'onLine\' || msgData.eventName==\'outLine\'){\n            oList.appendChild(createStateDom(msgData))\n            return\n        }\n        else if(msgData.eventName==\'public\'){\n            oList.appendChild(createPbcMsgDom(msgData))\n            return\n        }\n        else if(msgData.eventName==\'private\'){\n            oList.appendChild(createPrivMsgDom(msgData))\n        }\n        else if(msgData.eventName==\'onLineUserInfo\'){\n            // oOnLineList.removeChild()\n            oOnLineList.appendChild(createOnLineUserDom(msgData))\n        }\n        //服务器 ping，需回pong ，表示连接正常\n        else if(msgData.eventName==\'ping\'){\n            ws.send(JSON.stringify({eventName:\'pong\'}))\n        }\n        \n    }\n\n    //创建上下线dom\n    const createStateDom = (content) => {\n        const { userid, username, eventName ,eventDesc } = content\n        const oItem = doc.createElement(\'span\')\n        const stateStr = ()=>{\n            if(eventName==\'onLine\'){\n                return \'上线了！\'\n            }\n            else if(eventName==\'outLine\'){\n                if(eventDesc){\n                    return `因：${ eventDesc } 下线了！`\n                }\n                else{\n                    return \'下线了！\'\n                }\n            }\n        }\n        oItem.innerHTML = `\n            <p style=\'color:gray;font-size:12px\'>\n                <span>${ username } ${ stateStr() } !!!</span>\n            </p>\n        `;\n        return oItem\n    }\n    //创建公共聊天dom\n    const createPbcMsgDom = (content) => {\n        const { username, dataTime, message} = content\n        const oItem = doc.createElement(\'li\')\n        oItem.innerHTML = `\n            <strong>\n                <span>${ username }</span>\n                <span>${ new Date(dataTime) }</span>\n            </strong>\n            <p> 说： ${ message }</p>\n        `;\n        return oItem\n    }\n    //创建私有聊天dom\n    const createPrivMsgDom = (content) => {\n        const { username, dataTime, message} = content\n        const oItem = doc.createElement(\'li\')\n        oItem.innerHTML = `\n            <div style=\"padding:5px 0px;background:orange;\">\n                <p> 来自： ${ username } 的私信：${new Date(dataTime)}</p>\n                <p> 内容： ${ message }</p>\n            </div>\n        `;\n        return oItem\n    }\n    //创建在线用户列表 \n    const createOnLineUserDom = (content) => {\n        if(oOnLineList.hasChildNodes()){\n            var childs = oOnLineList.childNodes; \n            childs.forEach((element)=>{\n                oOnLineList.removeChild(element)\n            })\n        }\n        const { userList } = content\n        const virtualList = doc.createElement(\'div\')\n        userList.forEach(element => {\n            console.log(element)\n            virtualList.innerHTML+= `\n            <p>\n                <span>${ element.name }</span>\n                <span>( ${ element.id } )</span>\n            </p>\n        `;\n        });\n        \n        return virtualList\n    }\n\n    //当前重连次数\n    let reConnectCount = 0\n    //最大重连次数\n    const maxReConnecCount = 5\n    //重连间隔 ms\n    const reConnectTime = 5000\n    //timer\n    let time = null\n    //重连锁\n    let reConnectionLock = false\n    //是否断线重连过？\n    let isRecFlag = false\n\n\n    //打印线成功 log\n    const reConnectedAndHealLog = () => {\n        if(isConnectionSuccess && isRecFlag){\n            time && clearTimeout(time)\n            reConnectionLock = false\n            isRecFlag = false\n            console.log(`重连成功，重连次数：${ reConnectCount }`)\n            reConnectCount = 0\n            return   \n        }\n    }\n    //断线重连函数\n    const reConnection = () => {\n        isRecFlag = true\n        if(reConnectionLock){\n            return\n        }\n        \n        \n        reConnectionLock = true\n        time = setTimeout(()=>{\n            if(reConnectCount>=maxReConnecCount){\n                time && clearTimeout(time)\n                console.log(`重连失败，重连次数 ${ reConnectCount }，最大重连次数${ maxReConnecCount }`)\n            }\n            else{\n                reConnectCount ++\n                console.log(`重连第 ${ reConnectCount } 次`)\n                init()\n            }\n            reConnectionLock = false\n\n        },reConnectTime) \n    }\n\n\n    //心跳检测事件 ms\n    const heartBeatTime = 1000*15\n    const heartBeatCloseTime = 1000*10\n    let heartBeatTimeout  = null\n    let heartBeatCloseTimeout = null\n    //心跳开始\n    const heartBeatStart = () => {\n        heartBeatTimeout = setTimeout(()=>{\n            //向服务器发起heartbeat，服务器返回任何数据说明连接正常\n            //在message事件能收到数据，就reset 然后再开启\n            console.log(\'heartbeat\')\n            ws.send(JSON.stringify({eventName:\'heartbeat\'}))\n            heartBeatCloseTimeout = setTimeout(()=>{\n                //如果 heartBeatCloseTime 内没有收到服务端的信息，说明掉线，关闭连接，再启动重连\n                isConnectionSuccess = false\n                ws.close()\n                console.log(\'断开连接！！！\')\n                \n                reConnection()\n            },heartBeatCloseTime)\n        },heartBeatTime)\n    }\n    //心跳重置\n    const heartBeatReset = () => {\n        heartBeatTimeout && clearTimeout(heartBeatTimeout)\n        heartBeatCloseTimeout && clearTimeout(heartBeatCloseTimeout)\n    }\n\n    init()\n    \n})(document,window)\n```\nnode后台\n\nnpm install ws --save\n```javascript\n//server.js\nconst Ws = require(\'ws\')\nconst WsServer = Ws.Server\nconst server = new WsServer({ port: 8000 });\n\n((server)=>{\n\n    let onlineUserList = new Map([])\n    let onlineUserCount = 0\n    \n    const init = () => {\n        bindEvent()\n    };\n    const bindEvent = () => {\n        server.on(\'connection\',handleServerConnection);\n        server.on(\'close\',handleServerClose)\n    };\n    //关闭服务\n    const handleServerClose = () =>{\n        clearInterval(switchAlive);\n    }\n    //开启连接\n    const handleServerConnection = (client) => {\n        client.on(\'close\',(e)=>{\n            return handleClose(e,client)\n        });\n        client.on(\'message\',(msg)=>{\n           return handleMessage(msg,client)\n        })\n    };\n    //一个客户端关闭\n    const handleClose = (e,client) => {\n        console.log(\'有一位用户主动或被动下线了，他的名字是：\',client.username,\'他的id是：\',client.userid); \n\n        //更细颗粒度，需要在message里根据eventName做处理（比如 判断主动还是被动下线），所以这里只是log一下\n        \n    };\n\n    const handleMessage = (msg,client) => {\n        const message = JSON.parse(msg)\n        \n        // console.log(message);\n        //用户上线\n        if(message.eventName==\'onLine\'){\n            client.userid = message.userid\n            client.username = message.username\n            client.isAlive = true\n            if(!onlineUserList.has(message.userid)){\n                onlineUserList.set( message.userid,{id:message.userid,name:message.username})   \n            }           \n            onlineUserCount = onlineUserList.size\n\n            console.log(\'一位用户上线了,当前在线人数-->\',onlineUserCount)\n            console.log(\'当前在线信息-->\',onlineUserList)\n            //广播信息\n            broadcast(server,message)\n            //广播在线人员信息\n            broadcastOnlineUsr(server)\n            return\n        }\n        //用户下线\n        else if(message.eventName==\'outLine\'){\n            onlineUserList.delete(client.userid)\n            onlineUserCount = onlineUserList.size\n            client.isAlive = false\n            client.terminate()\n            console.log(\'一位用户下线了,当前在线人数-->\',onlineUserCount)\n            console.log(\'当前在线信息-->\',onlineUserList)\n            //广播信息\n            broadcast(server,message)            \n            //广播在线人员信息\n            broadcastOnlineUsr(server)\n            return\n        }\n        \n        //公共聊天\n        else if(message.eventName==\'public\'){\n            client.isAlive = true\n            broadcast(server,message)\n            return\n        }\n        //私聊\n        else if(message.eventName==\'private\'){\n            client.isAlive = true\n            privateChannel(server,message)\n            return\n        }\n        //pong\n        else if(message.eventName==\'pong\'){\n            client.isAlive = true\n            // client.isAlive = true\n        }\n        //heartbeat\n        else if(message.eventName==\'heartbeat\'){\n            //给对应的客户端回应heartbeat\n            client.isAlive = true\n            client.send(JSON.stringify({eventName:\'heartbeat\'}))\n        }\n             \n\n    }\n\n    //广播\n    const broadcast = (service, content) => {\n        service.clients.forEach(c=>{c.send(JSON.stringify(content))})\n    }\n    //广播在线用户信息\n    const broadcastOnlineUsr = (service) => {\n        const userList = []\n        onlineUserList.forEach(v=>{\n            userList.push(v)\n        })\n        const onLineUserInfo = {\n            eventName: \'onLineUserInfo\',\n             userList: userList\n        }\n        service.clients.forEach(c=>{c.send(JSON.stringify(onLineUserInfo))})\n    }\n    //私聊\n    const privateChannel = (service,content) =>{\n        // console.log(content)\n        const targetPersonId = content.to\n        service.clients.forEach(v=>{\n            if(v.userid==targetPersonId){\n                v.send(JSON.stringify(content))\n                return\n            }\n        })\n    }\n\n    //定时检测，切换状态\n    //每过pingTime，设置客户端为broken，并发送ping(),\n    //如果客户端返回pong(),证明连接正常，在监听的message事件里设置为对应事件所属客户端isAlive=true\n    //如果客户端未返回信息，那么这个链接的状态已经是isAlive=false的，那么它会在下一个轮询周期（pingTime）被清理掉\n\n    //发送ping消息的事件间隔 ms\n    const pingTime = 1000*10 \n\n    const switchAlive = () =>{\n        \n        return setInterval(()=>{\n            //当前在线客户端userid\n            const onlineClientList = []\n            server.clients.forEach(c=>{\n                //broken\n                if(c.isAlive==false){\n                    c.terminate()\n                    onlineUserList.delete(c.userid)\n                    onlineUserCount = onlineUserList.size\n                    console.log(\'这里是switchAlive，一个客户端 被动 掉线了，他的id是++++\',c.userid)\n\n                    //广播信息\n                    broadcast(server,{\n                        userid: c.userid,\n                        username: c.username,\n                        eventName: \'outLine\',\n                        eventDesc: \'网络问题\'\n                    })            \n                    //广播在线人员信息\n                    broadcastOnlineUsr(server)\n                    return\n                }\n                //healthy\n                c.isAlive = false\n                c.send(JSON.stringify({eventName:\'ping\'}))\n                onlineClientList.push(c.userid)\n            })\n            console.log(\'这里是switchAlive，当前在线客户端id列表为:\',onlineClientList)\n\n        },pingTime)\n    }\n    \n    init()\n    switchAlive()\n\n})(server);\n```\n### 效果\n1.\n![websocket_1.png](https://www.xiaohai-learn.pub/image/blogimgs/9v14W2FCXi-websocket_1.png)\n2.\n![websocket_2.png](https://www.xiaohai-learn.pub/image/blogimgs/8lmTUG1U4V-websocket_2.png)\n3.\n![websocket_3.png](https://www.xiaohai-learn.pub/image/blogimgs/13NV0mObM9-websocket_3.png)\n\n更新 first update\n1.\n![ws1.png](https://www.xiaohai-learn.pub/image/blogimgs/XSb06Vhyf5-ws1.png)\n2.\n![ws2.png](https://www.xiaohai-learn.pub/image/blogimgs/gQHUirhgLV-ws2.png)\n3.\n![ws3.png](https://www.xiaohai-learn.pub/image/blogimgs/IwfPOfIG77-ws3.png)\n4.\n![ws4.png](https://www.xiaohai-learn.pub/image/blogimgs/ID3vbVWDPe-ws4.png)\n5.\n![ws6.png](https://www.xiaohai-learn.pub/image/blogimgs/QKmgf3313O-ws6.png)\n6.\n![ws7.png](https://www.xiaohai-learn.pub/image/blogimgs/03y1zAo768-ws7.png)\n\n2022.05.16 done.\n2022.05.17 first update.\n\n\n\n\n\n','JavaScript,WebSocket','实验',9,80,0,0,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','/blogimgs/9v14W2FCXi-websocket_1.png,/blogimgs/8lmTUG1U4V-websocket_2.png,/blogimgs/13NV0mObM9-websocket_3.png,/blogimgs/XSb06Vhyf5-ws1.png,/blogimgs/gQHUirhgLV-ws2.png,/blogimgs/IwfPOfIG77-ws3.png,/blogimgs/ID3vbVWDPe-ws4.png,/blogimgs/QKmgf3313O-ws6.png,/blogimgs/03y1zAo768-ws7.png,',1,'2021-01-05 21:05:45','2022-08-26 14:16:03'),(10005,'Vue封装ECharts','/blogimgs/nvE3LzLXrN-echarts_org.png,','现在数据可视化非常热，对应的图表很多，其中ECharts在学校就学过，只是当时都是用js封装的，对于目前的开发，很多时候都是使用各种框架，因此需要对ECharts进行再次封装。\n\n封装后，实现动态宽高、动态数据绑定及动态option配置，还有各种内置函数的注册及自动销毁等\n\n这篇文章做个记录\n![echarts_org.png](https://www.xiaohai-learn.pub/image/blogimgs/nvE3LzLXrN-echarts_org.png)','### 正文\n\n**须知**\n- ECharts需要在dom绑定后开始实例化，因此init()需在mounted()开始\n- 改变宽高的resize()为dom操作，需调用$nextTick() API\n- 对于监听的事件，在组件销毁时，也需要销毁\n- ECharts对一些数据有缓存，在数据变化时，对使用者更友好，可以根据需求，配置去执行是否销毁或者缓存...\n\n\n**上代码：**\n\n*CustomEcharts：自定义echarts组件*\n\n```javascript\n<template>\n<!-- 自定义echarts -->\n  <div\n    :id=\"id\"\n    ref=\"custum_echarts\"\n    :style=\"style\"\n  >\n  </div>\n</template>\n\n<script>\nconst randomId = ()=>{\n  return new Date().getTime()\n}\n\nexport default {\n  name: \"CustomEcharts\",\n  data(){\n    return {\n      id: randomId(),\n      myChart: null,\n      //预设 替换 键名 （部分替换时会使用到）\n      preset_replace_key:[\'xAxis\', \'yAxis\', \'series\'],\n      //事件名列表，用于收集绑定的事件，在组件销毁时集中销毁监听\n      event_name_list:[]\n    }\n  },\n  props: {\n    renderType:{\n      type: String,\n      default: \'canvas\'\n    },\n    //  （默认）[]为全部删除，传参[\'xAxis\', \'yAxis\', \'series\']至少一项为部分删除该项\n    replace:{\n      type: Array,\n      default: ()=>[]\n    },\n    height: {\n      type: String,\n      default: \'400px\'\n    },\n    width: {\n      type: String,\n      default: \'600px\'\n    },\n    option:{\n      type: Object,\n      required: true\n    },\n    transClick:{\n      type: Function\n    },\n    transDataZoom:{\n      type: Function\n    }\n  },\n  computed: {\n    style() {\n      return {\n        height: this.$props.height,\n        width: this.$props.width\n      }\n    }\n  },\n   methods:{\n    init(){\n      return new Promise((resolve,reject)=>{\n        try{\n          this.myChart = this._echarts.init(this.$refs.custum_echarts,null,{renderer:this.$props.renderType});\n          this.myChart.setOption(this.option);\n          resolve()\n        }catch(e){\n          reject(e)\n        }\n      })\n    },\n    //判断替换类型\n    judgeReplace(){\n      if(this.$props.replace.length==0){\n        return true\n      }\n      return false\n    },\n    //封装 注册事件函数\n    registeEvent(name,fn){\n      this.event_name_list.includes(name)?\'\':this.event_name_list.push(name)\n      this.myChart.on(name,(e)=>{fn(e)})\n    },\n    //点击事件\n    handleClick(e){ this.$emit(\'transClick\',e) },\n    //区域缩放事件\n    handleDataZoom(e){ this.$emit(\'transDataZoom\',e)}\n  },\n  mounted () {  \n    this.init()\n      .then(()=>{\n        //Events\n        this.registeEvent(\'click\',this.handleClick)\n        this.registeEvent(\'datazoom\',this.handleDataZoom)\n      })\n      .catch(err=>{\n        throw err\n      })\n    \n  },\n  updated () {\n    // console.log(this.event_name_list)\n  },\n  beforeDestroy() {\n    let mc = this.myChart\n    if(mc){\n      //销毁监听事件\n      this.event_name_list.forEach(v=>mc.off(v))\n      //销毁实例，销毁后实例无法再被使用。\n      mc.dispose()\n      /* dispose 会释放内部占用的一些资源和事件绑定，但是解除实例的引用我们是做不到的，所以需要重新赋值为null */\n      mc = null\n      return\n    }\n    return\n  },\n  //响应式自适应\n  watch: {\n    height: {\n      handler (newVal,oldVal){\n        this.$nextTick(()=>{\n          this.myChart && this.myChart.resize({\n            animation: {\n              duration: 500\n            }\n          })\n        })\n      }\n    },\n    width: {\n      handler (newVal,oldVal){\n          this.$nextTick(()=>{\n            this.myChart && this.myChart.resize({\n              animation: {\n                duration: 500\n              }\n            })\n        })\n        \n      }\n    },\n    /**\n     * 删除所有：使用 notMerge: true，则所有组件都被删除。\n      删除部分：使用 replaceMerge: [...]，被指定的组件类型，会根据 replaceMerge 的规则：如果 id 匹配就合并（ merge ），否则旧组件被删除，新组件被创建。\n      “部分删除” 有助于，在删除该删除的组件时，保留其他组件的状态（如高亮、动画、选中状态）。\n     */\n    option: {\n      handler(newVal,oldVal) {\n        const result = this.judgeReplace()\n        let opt = {}\n        if(result){\n          opt = {notMerge: true}\n        }\n        else{\n          let replace_name = []\n          this.$props.replace.forEach(v=>{\n            this.preset_replace_key.includes(v)?replace_name.push(v):\'\'\n          })\n          opt = {replaceMerge: replace_name}\n        }\n        this.$nextTick(()=>{\n          this.myChart.setOption(newVal,opt)\n        })\n      },\n      deep: true\n    },\n  }\n};\n</script>\n\n<style scoped lang=\"scss\">\n\n</style>\n\n```\n\n*HomeView:父组件*\n\n```javascript\n<template>\n  <div class=\"home\">\n    <CustomEcharts\n    :option=\'option\'\n    :width=\'width\'\n    :height=\'height\'\n    :replace=\'replace_name\'\n    @transClick=\'dealClick\'\n    @transDataZoom=\'dealDataZoom\'\n    />\n    <button @click=\'changeWidth\'>changeWidth</button>\n    <button @click=\'changeOpt\'>changeOpt</button>\n  </div>\n</template>\n\n<script>\n// @ is an alias to /src\nimport CustomEcharts from \"@/components/CustomEcharts.vue\";\n\nexport default {\n  name: \"HomeView\",\n  components: {\n    CustomEcharts,\n  },\n  data () {\n    return {\n      width:\'600px\',\n      height:\'400px\',\n      // renderType:\'svg\',\n      replace_name:[\'series\'],\n      line_data:[150, 230, 224, 218, 135, 147, 260],\n    }\n  },\n  computed: {\n    option() {\n      return {\n          toolbox: {\n            feature: {\n              dataZoom: {\n                yAxisIndex: \'none\'\n              },\n              restore: {},\n              saveAsImage: {}\n            }\n          },\n          xAxis: {\n            type: \'category\',\n            data: [\'Mon\', \'Tue\', \'Wed\', \'Thu\', \'Fri\', \'Sat\', \'Sun\']\n          },\n          yAxis: {\n            type: \'value\'\n          },\n          series: [\n            {\n              data: this.line_data,\n              type: \'line\'\n            }\n          ]\n      }\n    }\n  },\n  methods: {\n    changeWidth(){\n      if(this.width==\'600px\'){\n        this.width=\'800px\'\n        return\n      }\n      this.width=\'600px\'\n    },\n    changeOpt(){\n      let new_data = []\n      this.line_data.forEach(v=>{\n        new_data.push(Math.floor(Math.random()*100))\n      })\n      this.line_data = new_data\n    },\n    dealClick(e){\n      console.log(e);\n    },\n    dealDataZoom(e){\n      console.log(e)\n    }\n  }\n};\n</script>\n```\n\n### 效果示例\n\n1. 初始化图表\n\n![echarts1.png](https://www.xiaohai-learn.pub/image/blogimgs/og0qyp1A77-echarts1.png)\n2. 改变宽度\n\n![echarts2.png](https://www.xiaohai-learn.pub/image/blogimgs/T5qx69tF45-echarts2.png)\n3. 改变配置项\n\n![echarts3.png](https://www.xiaohai-learn.pub/image/blogimgs/42t9CGH3py-echarts3.png)\n4. 触发click事件\n\n![echarts4.png](https://www.xiaohai-learn.pub/image/blogimgs/A678wb9tlR-echarts4.png)\n5. 触发datazoom事件\n\n![echarts5.png](https://www.xiaohai-learn.pub/image/blogimgs/1Iwss58Vhp-echarts5.png)\n\n\n大概就是这样，其他事件按需求添加就行..\n','Vue,JavaScript','技术帖',9,85,0,3,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','/blogimgs/og0qyp1A77-echarts1.png,/blogimgs/T5qx69tF45-echarts2.png,/blogimgs/42t9CGH3py-echarts3.png,/blogimgs/A678wb9tlR-echarts4.png,/blogimgs/1Iwss58Vhp-echarts5.png,',1,'2021-01-05 21:40:25','2022-08-26 16:53:30'),(10006,'Test Editormd氪','','### 多语言代码高亮 Codes\n\n#### 行内代码 Inline code\n\n执行命令：`npm install marked`\n\n#### 缩进风格\n\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\n','### 关于 Editor.md\ndddddd','Vue','日记',12,55,0,0,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',2,'2021-04-11 16:50:09','2022-08-26 14:16:03'),(10007,'发布博客测试','','摘要测试','内容测试','Vue,Python,React','实验',0,3,0,0,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',2,'2022-03-02 23:34:13','2022-08-26 14:16:03'),(10008,'草稿箱不传图片测试','','草稿箱不传图片测试摘要','草稿箱不传图片测试内容','Nodejs,React','实验',1,17,1,0,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',2,'2022-03-02 23:35:36','2022-08-26 14:16:03'),(10009,'草稿箱传图片测试1','','草稿箱传图片测试1摘要','草稿箱传图片测试1内容\n先传图片，不保存草稿','JavaScript','实验',0,18,1,0,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',2,'2022-03-02 23:38:20','2022-08-26 14:16:03'),(10010,'新建草稿箱','','','','','',0,0,0,0,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',3,'2022-03-02 23:38:28','2022-08-26 14:16:03'),(10011,'上传图片保存草稿测试2','','123','233','Nodejs','实验',1,17,1,0,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',2,'2022-03-02 23:53:54','2022-08-26 14:16:03'),(10012,'js中 apply call bind 用法','/blogimgs/6Q0f4QEq6e-code2.jpg,','在查资料、看文档的时候，经常会看到有人用call()、apply()、bind()这三种方法，很疑惑，但没当回事，后来出现的频率越来越高，所有就去学习了下，这篇文章做个记录...\n\n![code2.jpg](https://www.xiaohai-learn.pub/image/blogimgs/6Q0f4QEq6e-code2.jpg)','### 正文\n\njs 里函数调用有 4 种模式：**方法调用**、**正常函数调用**、**构造器函数调用**、**apply/call 调用**。\n同时，无论哪种函数调用除了你声明时定义的形参外，还会自动添加 2 个形参，分别是 **this** 和 **arguments**。\n**arguments** 不涉及到上述 3 个函数，所以这里只谈 **this**。**this** 的值，在上面 4 中调用模式下，分别会绑定不同的值。分别来说一说\n\n**方法调用：**\n  这个很好理解，函数是一个对象的属性，比如\n```javascript\nvar a = {    \n    v : 0,    \n    f : function(xx) {                \n        this.v = xx;    \n    }\n}\na.f(5);\n```\n这个时候，上面函数里的 **this** 就绑定的是这个对象 **a**。所以 **this.v** 可以取到对象 **a** 的属性 **v**。\n\n**正常函数调用:**\n依然看代码\n```javascript\nfunction f(xx) {        \n    this.x = xx;\n}\nf(5);\n```\n这个时候，函数 **f** 里的 **this** 绑定的是全局对象，如果是在浏览器运行的解释器中，一般来说是?**window** 对象。所以这里 **this.x** 访问的其实是 **window.x** ，当然，如果 **window** 没有 **x** 属性，那么你这么一写，按照 **js** 的坑爹语法，就是给 **window** 对象添加了一个 **x** 属性，同时赋值。\n\n**构造器函数调用：**\n\n构造函数一直是我认为是 **js** 里最坑爹的部分，因为它和 **js** 最初设计的基于原型的面向对象实现方式格格不入，就好像是特意为了迎合大家已经被其他基于类的面相对象实现给惯坏了的习惯。\n如果你在一个函数前面带上 **new** 关键字来调用，那么 **js** 会创建一个 **prototype** 属性是此函数的一个新对象，同时在调用这个函数的时候，把 **this** 绑定到这个新对象上。当然 **new** 关键字也会改变 **return** 语句的行为，不过这里就不谈了。看代码\n```javascript\nfunction a(xx) {        \n    this.m = xx;\n}\nvar b = new a(5);\n```\n上面这个函数和正常调用的函数写法上没什么区别，只不过在调用的时候函数名前面加了关键字 **new** 罢了，这么一来，**this** 绑定的就不再是前面讲到的全局对象了，而是这里说的创建的新对象，所以说这种方式其实很危险，因为光看函数，你不会知道这个函数到底是准备拿来当构造函数用的，还是一般函数用的。所以我们可以看到，在 **jslint** 里，它会要求你写的所有构造函数，也就是一旦它发现你用了 **new** 关键字，那么后面那个函数的首字母必须大写，这样通过函数首字母大写的方式来区分，我个人只有一个看法：坑爹：）\n\n**apply/call 调用：**\n\n我们知道，在 **js** 里，函数其实也是一个对象，那么函数自然也可以拥有它自己的方法，有点绕，在 **js** 里，每个函数都有一个公共的 **prototype** **——** **Function**，而这个原型自带有好几个属性和方法，其中就有这里困惑的 **bind**、**call**、**apply** 方法。先说 **apply** 方法，它让我们构造一个参数数组传递给函数，同时可以自己来设置 **this** 的值，这就是它最强大的地方，上面的 3 种函数调用方式，你可以看到，**this** 都是自动绑定的，没办法由你来设，当你想设的时候，就可以用 **apply()** 了。**apply**?函数接收 2 个参数，第一个是传递给这个函数用来绑定?**this** 的值，第二个是一个参数数组。看代码\n```javascript\nfunction a(xx) {        \n    this.b = xx;\n}\nvar o = {};\na.apply(o, [5]);\nalert(a.b);    // undefined\nalert(o.b);    // 5\n```\n是不是很神奇，函数 **a** 居然可以给 **o** 加属性值。当然，如果你 **apply** 的第一个参数传递 **null**，那么在函数 **a** 里面 **this** 指针依然会绑定全局对象。\n\n**call()** 方法和 **apply()** 方法很类似，它们的存在都是为了改变 **this** 的绑定，那 **call()** 和 **apply()** 有什么区别呢？就我个人看来，没啥鸟区别。。。开玩笑！刚刚说了，上面 **apply()** 接收两个参数，第一个是绑定?**this** 的值，第二个是一个参数数组，注意它是一个数组，你想传递给这个函数的所有参数都放在数组里，然后 **apply()** 函数会在调用函数时自动帮你把数组展开。而 **call()** 呢，它的第一个参数也是绑定给 **this** 的值，但是后面接受的是**不定参数**，而不再是一个数组，也就是说你可以像平时给函数传参那样把这些参数一个一个传递。所以如果一定要说有什么区别的话，看起来是这样的\n```javascript\nfunction a(xx, yy) {    \n    alert(xx, yy);    \n    alert(this);    \n    alert(arguments);\n}\na.apply(null, [5, 55]);\na.call(null, 5, 55);\n```\n\n仅此而已。\n\n最后再来说 **bind()** 函数，上面讲的无论是 **call()** 也好， **apply()** 也好，都是立马就调用了对应的函数，而 **bind()** 不会， **bind()** 会生成一个新的函数，**bind()** 函数的参数跟 **call()** 一致，第一个参数也是绑定 **this** 的值，后面接受传递给函数的不定参数。 **bind()** 生成的新函数返回后，你想什么时候调就什么时候调，看下代码就明白了\n```javascript\nvar m = {	\n    \"x\" : 1\n};\nfunction foo(y) {	\n    alert(this.x + y);\n}\nfoo.apply(m, [5]);\nfoo.call(m, 5);\nvar foo1 = foo.bind(m, 5);\nfoo1();\n```\n末了来个吐槽，你在 **js** 里想定义一个函数，于是你会这么写:\n```javascript\nfunction jam() {};\n```\n其实这是 **js** 里的一种语法糖，它等价于\n```javascript\nvar jam = function() {};\n```\n然后你想执行这个函数，脑洞大开的你会这么写：\n```javascript\nfunction jam() {}();\n```\n但是这么写就报错了，其实这种写法也不算错，因为它确实是 **js** 支持的函数表达式，但是同时 **js** 又规定以 **function **开头的语句被认为是函数语句，而函数语句后面是肯定不会带 **()** 的，所以才报错，于是聪明的人想出来，加上一对括号就可以了。于是就变成了这样：\n```javascript\n(function jam() {}());\n```\n这样就定义了一个函数同时也执行它\n\n>文章来源 [js中bind、call、apply函数的用法](https://blog.51cto.com/rangercyh/1615809)\n\n\n\n\n','JavaScript','技术帖',1,42,1,2,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',1,'2022-03-03 00:00:45','2022-08-26 14:16:03'),(10013,'JavaScript中函数的防抖 (Debounce) 与节流 (Throttle)','/blogimgs/Hrc8Qa4y29-code4.jpg,','debounce & throttle 是日常开发中很常用的功能了，这里面就用到 this 的指向，通过上一篇内容，我们对 apply , call 有了初步的认识，那么这一篇包含了一些它们的用法...\n\n\n![code4.jpg](https://www.xiaohai-learn.pub/image/blogimgs/Hrc8Qa4y29-code4.jpg)','### 为何要防抖和节流\n\n有时候会在项目开发中频繁地触发一些事件,如 resize、 scroll、 keyup、 keydown等，或者诸如输入框的实时搜索功能，我们知道如果事件处理函数无限制调用，会大大加重浏览器的工作量，有可能导致页面卡顿影响体验；后台接口的频繁调用，不仅会影响客户端体验，还会大大增加服务器的负担。而如果对这些调用函数增加一个限制，让其减少调用频率，岂不美哉？\n\n针对这个问题，一般有两个方案：**防抖 (Debounce)** **节流 (Throttle)**\n\n![code3.jpg](https://www.xiaohai-learn.pub/image/blogimgs/Oc5g53f4G2-code3.jpg)\n### 防抖（Debounce）\n\n我对函数防抖的定义：**当函数被连续调用时，该函数并不执行，只有当其全部停止调用超过一定时间后才执行1次。**\n\n一个被经常提起的例子：\n\n>上电梯的时候，大家陆陆续续进来，电梯的门不会关上，只有当一段时间都没有人上来，电梯才会关门。\n\nTalk is cheap，我们直接 show code 吧。\n\n先做基本的准备（篇幅原因，HTML部分省略）：\n\n```javascript\nlet container = document.getElementById(\'container\');\n\n// 事件处理函数\nfunction handle(e) {\n    console.log(Math.random()); \n}\n\n// 添加滚动事件\ncontainer.addEventListener(\'scroll\', handle);\n\n```\n我们发现，每滚动一下，控制台就会打印出一行随机数。\n\n**基础防抖**\n\n我们现在写一个最基础的防抖处理：\n\n```javascript\nfunction debounce(func, wait) {\n    var timeout;//标记\n    return function() {\n      clearTimeout(timeout);\n      timeout = setTimeout(func, wait);\n    }\n}\n```\n事件也做如下改写：\n```javascript\ncontainer.addEventListener(\'scroll\', debounce(handle, 1000));\n```\n**标准防抖**\n\n以上基础版本会有两个问题，请看如下代码：\n```javascript\n// 处理函数\nfunction handle(e) {\n    console.log(this); //输出Window对象\n    console.log(e); //undefined\n}\n```\n没错，当我们不使用防抖处理时，==handle()== 函数的 ==this== 指向调用此函数的container，而在外层使用防抖处理后，this的指向会变成Window。 其次，我们也要获取到事件对象 ==event==\n\n所以我们要对防抖函数做以下改写：\n\n```javascript\n\nfunction debounce(fn, wait) {\n  let timeout;\n  return function() {\n    let that = this;\n    let arg = arguments;\n    clearTimeout(timeout);\n    timeout = setTimeout(function(){\n      fn.apply(that,arg)//使用apply改变this指向\n    }, wait);\n  }\n}\n```\n\n当然了，如果使用箭头函数便可以省去外层声明。\n\n**先触发式防抖**\n\n以上的情况都是只有当连续触发停止后才执行，那如果我们想让事件第一次触发就执行，后面的连续触发都不执行，直到停止触发一段时间才可以再次触发（比如防止频繁点击），该如何处理呢？\n\n那么可以利用同样的原理，稍作修改即可：\n\n```javascript\nfunction debounce(fn, wait) {\n    let timeout;\n    return function(){\n      let arg = arguments;\n      let that = this;\n      clearTimeout(timeout);\n      !timeout && fn.apply(that,arg)\n        timeout = setTimeout(function(){\n          timeout = null;\n        }, wait);\n    }\n}\n```\n\n### 节流 (Throttle)\n\n顾名思义，**节流就是节约流量，将连续触发的事件稀释成预设评率**。 比如每间隔1秒执行一次函数，无论这期间触发多少次事件。\n\n这有点像公交车， 无论在站点等车的人多不多，公交车只会按时来一班，不会来一个人就来一辆公交车\n\n**标准节流**\n\n```javascript\nfunction throttle(fn, wait) {\n  let timeout; \n  return function () {\n    if (!timeout) { \n      timeout = setTimeout(() => {\n        timeout = null;\n        fn.apply(this, arguments)\n      }, wait)\n    }\n  }\n}\n```\n\n用滚动事件来描述节流，其实是一个非常典型的场景，比如需要用滚动事件判断是否加载更多等。\n\n**先触发式节流**\n\n和防抖函数类似，以上的情况是先等待后触发，如果我们想让事件先触发后等待，该如何处理呢？网上大部分文章都告诉你用时间戳的方式去实现，其实只要像防抖一样稍作修改即可实现\n\n```javascript\nfunction throttle(fn, wait) {\n  let timeout; \n  return function () {\n    if (!timeout) { \n      fn.apply(this, arguments)\n      timeout = setTimeout(() => {\n        timeout = null;\n      }, wait)\n    }\n  }\n}\n```\n\n这样，我们就会发现第一次触发函数就会立即生效。\n\n### 总结\n\n关于防抖与节流，**lodash**、**underscore**等工具库都有完善的实现可以直接用，本没有必要造轮子。本文的目的仅仅是为了将其主要思想和实现思路展现出来。更重要的，知道防抖和节流的本质后，就知道在何时使用防抖或者节流，何时先触发或后触发。无论需求如何改变，都可以灵活的运用。\n\n> 文章来源 [说说 JavaScript 中函数的防抖 (Debounce) 与节流 (Throttle)](https://juejin.cn/post/6844903869995024397)\n\n\n\n\n\n\n\n\n','JavaScript','技术帖',8,32,1,3,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','/blogimgs/Oc5g53f4G2-code3.jpg,',1,'2022-03-03 00:03:38','2022-08-26 14:16:03'),(10014,'无痛刷新Token','','### 前端无痛刷新Token\n>当在线的用户身份过期了，我们该如何做到在用户无感知情况下，将旧的身份信息更新替换为新的呢？\n\n**处理逻辑**\n\n1. 判断==Token==是否过期\n   1.没过期：正常处理\n   2.过期：\n   >1.拿到新的==Token==保存\n   >2.重新发送==Token==过期这段时间内发起的请求\n\n**重点**\n\n- 保持==Token==过期这段时间发起请求状态（不能进入失败回调）\n- 把刷新==Token==后重新发送请求的响应数据返回到对应的调用者\n	\n\n','### 实现\n1. 创建一个flag ==isRefreshing== 来判断是否刷新中\n2. 创建一个数组队列==retryRequests==来保存需要重新发起的请求\n3. 判断到Token过期\n   1. ==isRefreshing = false== 的情况下 发起刷新Token的请求\n      1. 刷新Token后遍历执行队列==retryRequests==\n   2. ==isRefreshing = true== 表示正在刷新Token，返回一个Pending状态的Promise,并把请求信息保存到队列==retryRequests==中\n\n```javascript\n\nimport axios from \"axios\";\nimport Store from \"@/store\";\nimport Router from \"@/router\";\nimport { Message } from \"element-ui\";\nimport UserUtil from \"@/utils/user\";\n\n// 创建实例\nconst Instance = axios.create();\nInstance.defaults.baseURL = \"/api\";\nInstance.defaults.headers.post[\"Content-Type\"] = \"application/json\";\nInstance.defaults.headers.post[\"Accept\"] = \"application/json\";\n\n// 定义一个flag 判断是否刷新Token中\nlet isRefreshing = false;\n// 保存需要重新发起请求的队列\nlet retryRequests = [];\n\n// 请求拦截\nInstance.interceptors.request.use(async function(config) {\n  Store.commit(\"startLoading\");\n  const userInfo = UserUtil.getLocalInfo();\n  if (userInfo) {\n    //业务需要把Token信息放在 params 里面，一般来说都是放在 headers里面\n    config.params = Object.assign(config.params ? config.params : {}, {\n      appkey: userInfo.AppKey,\n      token: userInfo.Token\n    });\n  }\n  return config;\n});\n\n// 响应拦截\nInstance.interceptors.response.use(\n  async function(response) {\n    Store.commit(\"finishLoading\");\n    const res = response.data;\n    if (res.errcode == 0) {\n      return Promise.resolve(res);\n    } else if (\n      res.errcode == 30001 ||\n      res.errcode == 40001 ||\n      res.errcode == 42001 ||\n      res.errcode == 40014\n    ) {\n    // 需要刷新Token 的状态 30001 40001 42001 40014\n    // 拿到本次请求的配置\n      let config = response.config;\n    //   进入登录页面的不做刷新Token 处理\n      if (Router.currentRoute.path !== \"/login\") {\n        if (!isRefreshing) {\n            // 改变flag状态，表示正在刷新Token中\n          isRefreshing = true;\n        //   刷新Token\n          return Store.dispatch(\"user/refreshToken\")\n            .then(res => {\n            // 设置刷新后的Token\n              config.params.token = res.Token;\n              config.params.appkey = res.AppKey;\n            //   遍历执行需要重新发起请求的队列\n              retryRequests.forEach(cb => cb(res));\n            //   清空队列\n              retryRequests = [];\n              return Instance.request(config);\n            })\n            .catch(() => {\n              retryRequests = [];\n              Message.error(\"自动登录失败，请重新登录\");\n                const code = Store.state.user.info.CustomerCode || \"\";\n                // 刷新Token 失败 清空缓存的用户信息 并调整到登录页面\n                Store.dispatch(\"user/logout\");\n                Router.replace({\n                  path: \"/login\",\n                  query: { redirect: Router.currentRoute.fullPath, code: code }\n                });\n            })\n            .finally(() => {\n                // 请求完成后重置flag\n              isRefreshing = false;\n            });\n        } else {\n          // 正在刷新token，返回一个未执行resolve的promise\n          // 把promise 的resolve 保存到队列的回调里面，等待刷新Token后调用\n          // 原调用者会处于等待状态直到 队列重新发起请求，再把响应返回，以达到用户无感知的目的（无痛刷新）\n          return new Promise(resolve => {\n            // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行\n            retryRequests.push(info => {\n                // 将新的Token重新赋值\n              config.params.token = info.Token;\n              config.params.appkey = info.AppKey;\n              resolve(Instance.request(config));\n            });\n          });\n        }\n      }\n      return new Promise(() => {});\n    } else {\n      return Promise.reject(res);\n    }\n  },\n  function(error) {\n    let err = {};\n    if (error.response) {\n      err.errcode = error.response.status;\n      err.errmsg = error.response.statusText;\n    } else {\n      err.errcode = -1;\n      err.errmsg = error.message;\n    }\n    Store.commit(\"finishLoading\");\n    return Promise.reject(err);\n  }\n);\n\nexport default Instance;\n\n\n```\n>原文地址：[https://juejin.cn/post/7075348765162340383](https://juejin.cn/post/7075348765162340383)\n---\n**多说一句**\n用户身份信息处理很麻烦的，token后端要做很多事，不仅仅是token的刷新，还有是否可用，非法，携带信息处理等等...**respect**!\n\n\n','Vue,JavaScript','技术帖',10,57,2,2,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',1,'2022-03-03 00:43:15','2022-08-26 14:16:03'),(10015,'无痛刷新Token后续（后端）','','**序言**\n>通过上一篇内容，大家了解了token的无感知刷新，当我开发这个博客网站时，我有个疑问？\n我自己token无痛刷新很爽，那么那些盗用token的拿来刷起来岂不是也很舒服？我要改变点啥，让他们也得痛一下。\n\n**引入**\n\n- **token刷新事间**\n- **token最大有效时间**\n- **token刷新最大持续间隔**','### 须知\n\n**jsonwebtoken**\n**用法**\n***jwt.sign(payload, secretOrPrivateKey, [options, callback])***\n（异步）如果提供回调，则使用err或JWT 调用回调。\n\n（同步）将JsonWebToken返回为字符串。\n\npayload必须是一个object, buffer或者string。请注意， exp只有当payload是object字面量时才可以设置。\nsecretOrPrivateKey 是包含HMAC算法的密钥或RSA和ECDSA的PEM编码私钥的string或buffer。\noptions:\n- algorithm：加密算法（默认值：HS256\n- expiresIn：以秒表示或描述时间跨度zeit / ms的字符串。如60，\"2 days\"，\"10h\"，\"7d\"，Expiration time，过期时间\n- notBefore：以秒表示或描述时间跨度zeit / ms的字符串。如：60，\"2days\"，\"10h\"，\"7d\"\n- audience：Audience，观众\n- issuer：Issuer，发行者\n- jwtid：JWT ID\n- subject：Subject，主题\n- noTimestamp\n- header\n\n如果payload不是buffer或string，它将被强制转换为使用的字符串JSON.stringify()。\n在expiresIn，notBefore，audience，subject，issuer没有默认值时。也可以直接在payload中用exp，nbf，aud，sub和iss分别表示，***但是你不能在这两个地方同时设置***。\n请记住exp，nbf，iat是NumericDate类型。\n生成的jwts通常会包含一个iat值除非指定了noTimestamp。如果iat插入payload中，则将使用它来代替实际的时间戳来计算其他事情，诸如options.expiresIn给定一个exp这样的时间间隔。\n\n\nToken Expiration (exp claim)\n签署1小时期限的token:\n```javascript\njwt.sign({\n  exp: Math.floor(Date.now() / 1000) + (60 * 60),\n  data: \'foobar\'\n}, \'secret\');\n```\n\n使用此库生成令牌的另一种方法是:\n```javascript\njwt.sign({\n  data: \'foobar\'\n}, \'secret\', { expiresIn: 60 * 60 });\n\n//or even better:\n\njwt.sign({\n  data: \'foobar\'\n}, \'secret\', { expiresIn: \'1h\' });\n```\n***jwt.verify（token，secretOrPublicKey，[options，callback]）***\n验证token的合法性\n\n***jwt.decode（token [，options]）***\n（同步）返回解码没有验证签名是否有效的payload。\n==警告==：***这不会验证签名是否有效。你应该不为不可信的消息使用此。你最有可能要使用jwt.verify()。***\n\n**错误与代码**\n*TokenExpiredError*\n如果令牌过期，则抛出错误。\n错误对象：\n- name：\'TokenExpiredError\'\n- message：\'jwt expired\'\n- expiredAt：[ExpDate]\n\n*JsonWebTokenError*\n错误对象：\n- name：\'JsonWebTokenError\'\n- message：\n   - jwt异常\n   - jwt签名是必需的\n   - 无效签名\n   - jwt观众无效 预期：[OPTIONS AUDIENCE]\n   - jwt发行人无效。预期：[OPTIONS ISSUER]\n   - jwt id无效。预期：[OPTIONS JWT ID]\n   - jwt主题无效。预期：[OPTIONS SUBJECT]\n\n>来源：[https://segmentfault.com/a/1190000009494020](https://segmentfault.com/a/1190000009494020)\n\n***补充***\n1. 如果只需实现token过期就返回错误码然后刷新，在sign的时候，可以指定exp或者expiresIn,当拿到的前端的token过期，使用verify解析时会报错，捕捉错误就可以判断错误类型\n2. **但是**，如果要实现我这里要使用的方法，那么**必须**在payload的自定义数据里定义，因为我需**要解析前端传来的旧token**拿到里面的数据进行下一步，如果定义了exp或者expiresIn那么是无法verify解析的，因为过期会直接报错，没法拿到数据！\n\n### 流程\n定义：\n//token 刷新时间 \n==**refresh_time**==（token刷新时间）\n//token 可用最大时间 单位：秒\n**==access_time==**（token 可用最大时间 ）\n\n//token 最大不禁用持续时长，超过设置时长，旧token也必须重新登录\n//即 设置时间内，没有使用过该token，该token也会失效\n**==forbidden_time==**\n\n判断：\n\nconst now = Math.floor(Date.now()/1000)\n1. if（now<=access_time）//即token 有效期未超过最大时长，进行下一步\n   1. if(now<=create_time+refresh_time) //未过期 放行\n   2. else  //过期  重新颁发token,判定是否在不禁用间隔内\n      1. if(now>=create_time+forbidden_time) //超过不禁用间隔，需要重新登录\n      2. else //未超过，需要为其重新颁发token\n2. else token有效期超过最大时长,需要重新登录\n\n大概就是这么一个流程，话不多说，上代码！\n```javascript\n//admintokensettings.js ->token的预设\nconst preset = {\n    secret : \'helloworld\',\n    //token 刷新时间 单位：秒\n    refresh_time : 60*10,\n    //token 可用最大时间 单位：秒\n    access_time : 60*60*24*5, //5天\n\n//token 最大不禁用持续时长，超过设置时长，旧token也必须重新登录\n//即 设置时间内，没有使用过该token，该token也会失效\n    forbidden_time : 60*60*24*2 //2天\n}\n\nmodule.exports = {\n    preset\n}\n\n//create.js ->签署一个token\nconst jwt = require(\"jsonwebtoken\")\nconst { preset } = require(\'./admintokensettings\')\n\nlet createToken = (data)=>{\n    let token = jwt.sign({\n        //自定义保存内容\n        data:data\n    },preset.secret)\n\n    return token;\n}\n\nmodule.exports = {\n    createToken\n}\n//verify.js ->验证于解析token\nconst jwt = require(\"jsonwebtoken\")\nconst { preset } = require(\'./admintokensettings\')\nlet varifyToken = (token)=>{//验证token是否合法的方法\n    return jwt.verify(token,preset.secret)\n}\n\nmodule.exports = {\n    varifyToken\n}\n\n//check.js ->路由前置执行的方法，可以理解为axios的请求拦截器，后台任何强求都要验证身份，middleware为每个请求添加太麻烦了\ntry {\n                const { create_time,\n                        refresh_time,\n                        access_time,\n                        forbidden_time \n                    } = jwt.verify(token,preset.secret).data\n                const now = Math.floor(Date.now()/1000)\n                if(now<=access_time){\n                    //token 有效期未超过最大时长\n                    if(now<=create_time+refresh_time){\n                        //未过期\n                        next()\n                    }\n                    else{\n                        //过期  重新颁发token,判定是否在不禁用间隔内\n                        if(now>=create_time+forbidden_time){\n                            //超过不禁用间隔，需要重新登录\n                            // console.log(\'token超过不禁用间隔，需要重新登录\')\n                            presend.msg = \'token超过不禁用间隔，需要重新登录\'\n                            presend.code = 20001\n                            res.send(presend)               \n                            return \n                        }else{\n                            //未超过，为其重新颁发token\n                            // console.log(\'token过期了，需要重新颁发token\')\n                            presend.msg = \'token过期，待更新\'\n                            presend.code = 20004\n                            res.send(presend)               \n                            return \n                        }                 \n                    }\n                }else{\n                    //token有效期超过最大有效时长\n                    // console.log(\'token有效期超过最大时长,需要重新登录\')\n                    presend.msg = \'token有效期超过最大时长,需要重新登录\'\n                    presend.code = 20001\n                    res.send(presend)               \n                    return \n                }\n            } catch (e) {\n                presend.msg = \'token非法,需重新登录\'\n                presend.code = 20002\n                presend.err = e\n                res.send(presend)\n                return\n            }   \n//adminlogin ->登录路由\n//在check方法需为这个接口放行\n//条件：登陆成功\nlet params = {\n                    uniqueid: Admin_UniqueId,\n                    create_time : Math.floor(Date.now()/1000),\n                    refresh_time : preset.refresh_time,\n                    access_time :Math.floor(Date.now()/1000+(preset.access_time)),\n                    forbidden_time : preset.forbidden_time\n                }\n                let token = createToken(params)\n		resinfo.token = token\n                res.send(resinfo)\n\n//refreshtoken ->刷新token路由\n//在check方法需为这个接口放行\ntry {\n        decoded = varifyToken(old_token).data\n    } catch (error) {\n        res.send({\n            msg:\'旧token解析失败\',\n            code:20002,\n            errmsg:error\n        })\n        \n        return\n    }\n    // console.log(decoded)\n    let new_token = createToken({\n        uniqueid: decoded.uniqueid,\n        create_time : Math.floor(Date.now()/1000),\n        refresh_time : preset.refresh_time,\n        access_time : Math.floor(Date.now()/1000+(preset.access_time)),\n        forbidden_time : preset.forbidden_time\n    })\n    res.send({\n        new_token:new_token,\n        msg:\'生成新token成功\',\n        code:20005\n    })\n```\n\n*再配合之前讲的前台无感知刷token，差不多就是这样啦\n时间可以根据用户使用频率变化一下，假如设置最大可用时间为半年，最大不禁用持续时长为5天，如果你使用频率只要在5天内天使用过一次，可以做到半年都不用登录，而token盗用者如果不在5天内去使用刷新token，那么如果想再使用这个token，就必须去使用账号密码登录了。当然，如果你账号密码也泄露了，神仙没救...\n哈哈哈哈哈哈哈....*\n\n\n\n\n','Nodejs,JavaScript','技术帖',4,156,0,7,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',1,'2022-03-03 01:21:43','2022-08-26 14:16:03'),(10016,'尚未完成功能','','```\n**需要完善、实现的功能记录**\n','\n1. **后台权限分配**：\n	后台未使用动态路由，使用每个角色存储的sidebar数据渲染sidebar，进入后台预定进入主页面，如果是未分配主页权限，那么还是会跳转到主页\n	解决：\n	1：使用动态路由，并且定义index为默认共有路由\n	2：依然使用sidebar，但是在定义权限树形图设置index为默认选中且不可更改路由，让所有权限都预分配到这个路由\n\n	>后台接口权限尚未实现，需要为每个角色配置可访问接口表，每次请求时查询当前接口名是否存在于当前角色所属的接口表里，存在为有权限，不存在即无权限；管理员角色应设置增删改查功能	\n2. **面包屑导航**(done)\n3. **前台、后台广告位未完成**(done)\n4. **前台 实验室 未设计**\n\n**2022.04.22记录**\n首页博客列表不应该携带blog_content字段，首页博客列表不展示blog_content,只展示blog_summary,在details页面才展示blog_content,但不展示blog_summary\n\n','Vue,JavaScript','日记',0,3,0,0,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','',2,'2022-03-07 03:49:55','2022-08-26 14:16:03'),(10017,'Vue 封装插件 button message confirm','/blogimgs/RSMHKG54Fx-code4.jpg,','>vue组件封装一直在使用，但是有时候这种封装也有==局限性==，比如一个消息提示框（message），常规方法封装成==组件==，在需要用到的页面import、注册、添加对应的flag控制显示...很麻烦，而且会造成==代码冗余==，因此需将它封装为函数式组件，类似elementui那样(this.$message，this.$notify...),所以封装了常用的几个==全局公用插件==，在每个页面可以直接使用\n\n![code4.jpg](https://www.xiaohai-learn.pub/image/blogimgs/RSMHKG54Fx-code4.jpg)','### 须知\n1. [Vue-api](https://cn.vuejs.org/v2/api/)\n2. [Vue-extend](https://cn.vuejs.org/v2/api/#Vue-extend)\n3. [Vue-plugin](https://cn.vuejs.org/v2/guide/plugins.html)\n\n### 正文\n 先看一下我的项目结构吧\n![level.png](https://www.xiaohai-learn.pub/image/blogimgs/XTPgg111bx-level.png)\n\n1. 首先是button的封装，\nbutton是在template中使用的，按照正常组件封装就行\nbutton封装很简单，不放代码了，思路就是props控制类名更换样式，就这么简单\n\n\n2. 其次是confirm的封装\nconfirm这里我们需要返回一个promise，通过点击确认，取消按钮触发resolve,reject回调，这样我们将下一步的逻辑，比如网络请求..添加到promise链中，也就类似与elementui的$confirm,这里只放主要代码\n 文件名：BaseConfirm.vue\n```javascript\n<template>\n  <div class=\"base-confirm\">\n      <div class=\"content-box\">\n          <div class=\"title\">\n              {{title}}\n          </div>\n          <div class=\"content\">\n              {{content}}\n          </div>\n          <div class=\"footer\">\n              <Basebutton\n              type=\'warn\'\n              size=\'mini\'\n              @click=\"handleConfirm()\"\n              >\n              {{confirmBtnText}}\n              </Basebutton>\n              <Basebutton\n              type=\'info\'\n              size=\'mini\'\n              @click=\"handleCancel()\"\n              >\n              {{cancelBtnText}}\n              </Basebutton>\n          </div>\n      </div>\n  </div>\n</template>\n\n<script>\nimport Basebutton from \'./BaseButton.vue\'\nexport default {\n    name: \'BaseConfirm\',\n    data() {\n        return {\n\n        }\n    },\n    components:{\n        Basebutton\n    },\n    props:{\n        title:{\n            type: String,\n            default: \'default title\'\n        },\n        content: {\n            type: String,\n            default: \'default content text\'\n        },\n        confirmBtnText:{\n            type: String,\n            default: \'confirm\'\n        },\n        cancelBtnText:{\n            type: String,\n            default: \'cancel\'\n        },\n    },\n}\n</script>\n```\n然后是对应的js文件：BaseConfirm.js\n\n```javascript\nimport Vue from \'vue\'\nimport BaseConfirm from \'./BaseConfirm.vue\'\n\nconst Confirm = Vue.extend(BaseConfirm)\n\nconst ConfirmFunc = (config)=>{\n    const Instance = new Confirm({\n        propsData: config\n    })\n    const createdom = Instance.$mount()\n    document.body.appendChild(createdom.$el)\n    //注销方法\n    const close = () =>{\n        Instance.$el.parentNode.removeChild(Instance.$el)\n        Instance.$destroy(true)\n    }\n\n    return new Promise((resolve,reject)=>{\n        Instance.handleConfirm = () =>{\n            resolve(close)\n        }\n        Instance.handleCancel = () =>{\n            reject()\n            close()\n        }\n    })\n}\n\nexport default {\n    install:(Vue)=>{\n        Vue.prototype.$confirm = ConfirmFunc\n    }\n}\n```\n\n\n\n3. 最后是消息提示框message的封装，\n如果仅仅只是需要一个效果，它比confirm好封装一些，但是用过elementui的朋友都知道，连续触发message，那么它在页面上呈现列表效果（一个接着一个），但是当某一项持续时间结束，那么其他项会立即补上空缺..这种效果需要重新计算设置剩余每一项的style，所以实现起来稍微复杂一点,只放主要代码\n\n 文件名：BaseMessage.vue\n```javascript\n<template>\n  <div id=\"id\" class=\"base-message\">\n      <transition name=\"down\">\n          <div class=\"message-box\"\n          :style=\"style[type]\" \n          >\n            <div class=\"text\">\n                {{text}}\n            </div>\n          </div>\n      </transition>\n  </div>\n</template>\n\n<script>\nexport default {\n    name:\'BaseMessage\',\n    props: {\n        text: {\n            type: String,\n            default: \'default text\'\n        },\n        type: {\n            type: String,\n            // warn 警告  error 错误  success 成功\n            default: \'success\'\n        }\n    },\n    data() {\n        return {\n            id: null,\n            style:{\n                warn: {\n                    color: \'#E6A23C\',\n                    backgroundColor: \'rgb(253, 246, 236)\',\n                    borderColor: \'rgb(250, 236, 216)\'\n                },\n                error: {\n                    color: \'#F56C6C\',\n                    backgroundColor: \'rgb(254, 240, 240)\',\n                    borderColor: \'rgb(253, 226, 226)\'\n                },\n                success: {\n                    color: \'#67C23A\',\n                    backgroundColor: \'rgb(240, 249, 235)\',\n                    borderColor: \'rgb(225, 243, 216)\'\n                }\n            },\n        }\n    },\n    computed: {       \n    },\n    methods: {\n        randomId() {\n            this.id = new Date().getTime()\n        }\n    },\n}\n</script>\n```\n对应的js文件：BaseMessage.js\n```javascript\nimport BaseMessage from \'./BaseMessage.vue\'\nimport Vue from \'vue\'\n\nconst Message = Vue.extend(BaseMessage)\n\nlet instances = []\nlet seed = 0\n\nconst MessageFunc = (config) => {\n  const DefaultConfig = {\n    text: \'default text\',\n    type: \'warn\',\n    duration: 3000\n  } \n\n  Object.assign(DefaultConfig,config)\n  // 实例化组件\n  const Instance = new Message({\n    propsData: DefaultConfig,\n  })\n  // 挂载\n  const vm = Instance.$mount() \n  \n  seed++\n  instances.push(vm)\n  vm.name = `_BaseMessage${seed}`\n  vm.$el.style.marginTop = `${ (seed-1)*35 }px`\n  // body插入dom\n  document.body.appendChild(vm.$el) \n  \n  //销毁\n  let timer = setTimeout(()=>{\n    seed--\n    //销毁dom\n    document.body.removeChild(vm.$el)\n    //重新计算剩余message高度\n    instances.splice(instances.findIndex(v=>v.name=vm.name),1)\n    instances.forEach((v,index)=>{\n      v.$el.style.marginTop = `${ (index)*35 }px`\n    })\n    //销毁实例\n    vm.$destroy(true)\n    clearTimeout(timer)\n  },DefaultConfig.duration)\n\n}\n\n\nexport default {\n  install: (Vue) => { // 暴露install方法供Vue.use()调用\n    Vue.prototype.$message = MessageFunc // 挂到Vue的原型上使用\n  }\n}\n```\n#### 使用\n\n1. main.js 全局引入\n```javascript\nimport Vue from \'vue\'\nimport App from \'./App.vue\'\nimport router from \'./router\'\nimport store from \'./store\'\n\n\nVue.config.productionTip = false\n\nimport BaseMessage from \'./components/BaseMessage\'\nimport BaseConfirm from \'./components/BaseConfirm\'\n\nVue.use(BaseMessage)\nVue.use(BaseConfirm)\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount(\'#app\')\n```\n\n\n2. 在需要的页面使用，比如我这里的 HomeView.vue\n```javascript\n<template>\n  <div class=\"home\">\n    <!-- <HelloWorld msg=\"Welcome to Your Vue.js App\"/> -->\n    <BaseButton\n    type=\'default\'\n    @click=\'handleClick\'\n    >type=\'default\'</BaseButton>\n    <BaseButton\n    type=\"info\"\n    size=\"large\"\n    @click=\"handleclickCreateMessage\"\n    >type=\"info\"</BaseButton>\n    <BaseButton\n    type=\'success\'\n    size=\'mini\'\n    @click=\"handleclickCreateMessage2\"\n    >type=\'success\'</BaseButton>\n    <BaseButton\n    type=\'warn\'\n    @click=\"handleclickCreateConfirm\"\n    >打开confirm</BaseButton>\n    <BaseButton\n    type=\'danger\'\n    >自定义按钮4</BaseButton>\n    <!-- <BaseConfirm></BaseConfirm> -->\n  </div>\n</template>\n\n<script>\nimport BaseButton from \'@/components/BaseButton.vue\'\nimport BaseMessage from \'@/components/BaseMessage.vue\'\n// import BaseConfirm from \'@/components/BaseConfirm.vue\'\nexport default {\n  name: \'HomeView\',\n  components: {\n    // HelloWorld,\n    BaseButton,\n    BaseMessage\n  },\n  methods: {\n    handleClick(e) {\n      console.log(e)\n    },\n    handleclickCreateMessage() {\n      this.$message({type: \'success\', text: \'hahhahah\'})\n    },\n    handleclickCreateMessage2() {\n      this.$message({type: \'warn\', text: \'666\' ,duration: 10000})\n    },\n    handleclickCreateConfirm() {\n      this.$confirm({\n      title: \'通知\',\n      content: \'这是自定义confirm插件\',\n      confirmBtnText: \'确定\',\n      cancelBtnText: \'取消\'\n    }).then((close)=>{\n      setTimeout(()=>{\n        close()\n      },5000)\n    }).catch(()=>{})\n    }\n  },\n  mounted(){\n    this.$message({type: \'success\', text: \'111122222\'})\n    \n  }\n}\n</script>\n<style scoped lang=\"scss\">\n.home{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n}\n</style>\n```\n#### 实现效果\n1. button\n![view1.png](https://www.xiaohai-learn.pub/image/blogimgs/16yv67174c-view1.png)\n\n2. message\n![view2.png](https://www.xiaohai-learn.pub/image/blogimgs/h10s4Tt5s2-view2.png)\n\n3. confirm\n![view3.png](https://www.xiaohai-learn.pub/image/blogimgs/xkryGflHp1-view3.png)\n','Vue,JavaScript','技术帖',0,21,0,0,'','','xiaohai','','','/blogimgs/XTPgg111bx-level.png,/blogimgs/16yv67174c-view1.png,/blogimgs/h10s4Tt5s2-view2.png,/blogimgs/xkryGflHp1-view3.png,',1,'2022-05-13 13:19:31','2022-08-26 17:18:38'),(10018,'Vue自定义指令 debounce throttle fixelement','/blogimgs/Ani0Sgf4G4-code8.png,','> Vue 自定义指令使用简单方便，可以用来封装目的性很强的高频使用方法，封装防抖节流函数，在想使用的元素使用指令即可\n\n> 2022.05.29 更新 fixelement，滚动时固定页面元素\n\n![code8.png](https://www.xiaohai-learn.pub/image/blogimgs/Ani0Sgf4G4-code8.png)','### 须知\n[vue自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html)\n\n### 正文\n\n防抖节流之前文章有介绍，\n\n1. 文件结构\n 在src文件夹下新建 utils文件夹，在utils文件夹下新建directives文件夹用来保存封装的所有指令，新建 common.js 与 index.js 文件，common.js封装暴露防抖节流函数，index.js 做统一注册\n\n2. common.js \n 代码\n```javascript\n\n//防抖\nfunction debounce(bindObj, fn, delay) {\n	return function(...args) {\n		bindObj.$$timer && clearTimeout(bindObj.$$timer)\n		bindObj.$$timer = setTimeout(() => {\n			fn.apply(this, args)\n		}, delay)\n	}\n}\n//节流\nfunction throttle(bindObj, fn, delay) {\n	bindObj.$$prevTime = Date.now()\n	return function(...args) {\n		const nowTime = Date.now()\n		if(nowTime - bindObj.$$prevTime > delay) {\n			fn.apply(this, args)\n			bindObj.$$prevTime = nowTime\n		}\n	}\n}\n\n//节流 （定时器版）\n// function throttle(bindObj, fn, delay) {\n// 	let canNext = true\n// 	return function(...args) {\n\n// 		if(!canNext){\n// 			return\n// 		}\n// 		canNext = false\n// 		bindObj.$$timer = setTimeout(function(){\n// 			fn.apply(this, args)\n// 			canNext = true\n// 			clearTimeout(bindObj.$$timer)\n// 		},delay)\n// 	}\n// }\n\n \nexport {\n	debounce,\n	throttle\n}\n\n```\n3. index.js\n代码\n```javascript\nimport Vue from \'vue\'\nimport { debounce,throttle } from \'./common\'\n\nVue.directive(\'debounce\',{\n    bind(el,binding,vnode){\n        const [eventname, fn, delay=500] = binding.value\n        el.addEventListener(eventname, debounce(vnode, fn, delay))\n    }\n})\n\nVue.directive(\'throttle\',{\n    bind(el,binding,vnode){\n        const [eventname, fn, delay=1000] = binding.value\n		el.addEventListener(eventname, throttle(vnode, fn, delay))\n    }\n})\n```\n\n4. 引入与使用\n 引入代码 main.js\n```javascript\nimport Vue from \'vue\'\nimport App from \'./App.vue\'\n\nVue.config.productionTip = false\n//自定义指令\nimport \'./utils/directives/index\'\n```\n\n 使用代码\n```javascript\n<template>\n  <div class=\"about\">\n    <h1>This is an about page</h1>\n    <h2>{{num}}</h2>\n    <button v-debounce=\"[\'click\',handledeDounce]\">debounce</button>\n    <button v-throttle=\"[\'click\',handledthrottle]\">throttle</button>\n   \n  </div>\n</template>\n<script>\nexport default {\n  name:\'AboutView\',\n  data() {\n    return {\n      num: 0,\n    }\n  },\n  methods:{\n    handledeDounce(e){\n      // console.log(e)\n      this.num++\n    },\n    handledthrottle(e){\n      // console.log(e)\n      this.num++\n    }\n  }\n}\n</script>\n```\n\n> 2022.05.29 更新： 有时候有些元素需要在滚动时固定到顶部位置（我这个博客侧边的归档栏使用到了这个），为了方便可以封装成指令，在想固定的元素使用即可\n> 2022.05.31 优化 fixelement : 当被固定元素有兄弟元素在它之上，并且兄弟元素使用了v-show，v-if在页面切换进行展示，隐藏时，被固定元素并不能更新自己据页面高度el.offsetTop，还是会按照初始化高度进行固定，因此，需要将初始化标识重新设定。并且使用这个方法，需要保证该元素所在页面、模板隐藏时需使用vif重新加载，不能使用v-show，因为在很频繁页面切换时，可能出现样式丢失导致该元素一直被固定；使用媒体查询隐藏时，不要使用display= none，使用position=absolute配合偏移量或者margin，padding ，width，heigh设为0，overflw = hidden设置元素，否则，切换页面大小滚动，还原时样式会出错.. 具体可以参考这个博客侧边栏广告与归档关系的实现\ncommon.js\n```javascript\n//固定顶部\nfunction fixElement (el,vnode,delay,offset){\n	vnode.$$prevTime = Date.now()\n	vnode.$$init = true\n	return function(...args) {\n		//保存元素初始化的 offset，作为从下向上滚动到原来该元素位置的依据\n		if(vnode.$$init){\n			vnode.$$initOffset = el.offsetTop\n			vnode.$$init = false\n		}\n		const nowTime = Date.now()\n		if(nowTime - vnode.$$prevTime > delay) {\n			//元素距离可视窗口顶部高度           \n			const eleH = el.getBoundingClientRect().top\n			const scrollH = document.documentElement.scrollTop || document.body.scrollTop \n			//向下滚动时判断\n			if(eleH<=0+offset){\n				el.style.position = \'fixed\'\n				el.style.top = 0+offset+\'px\'\n                		el.style.width = el.parentNode.offsetWidth+\'px\'	\n			}\n			//向上滚动时判断\n            		if( vnode.$$initOffset && scrollH<=vnode.$$initOffset){\n				//重置init\n				vnode.$$init = true\n\n                		el.style.position = \'static\'\n                		el.style.top = \'\'\n                		el.style.width = \'auto\'\n            		}\n			vnode.$$prevTime = nowTime\n		}\n	}\n}\n```\nindex.js\n```javascript\nVue.directive(\'fixElement\',{\n    bind(el,binding,vnode){\n        //offset 自定义偏移量 设置了margin，就不用设置偏移量\n        const [eventname,delay=100,offset=0] = binding.value\n		window.addEventListener(eventname, fixElement(el, vnode, delay,offset))\n    }\n})\n```\n\n \n\nok了\n\n \n\n\n','Vue,JavaScript','技术帖',0,31,0,3,'','','xiaohai','','','',1,'2022-05-19 02:40:22','2022-08-15 10:50:28'),(10019,'JavaScript 预编译','/blogimgs/vg51l9uoun-ani4.jpg,','**js 执行顺序**\n1.语法分析：检查通篇的语法错误，若有错误则不编译执行\n2.==预编译==\n3.解释执行：解释一行，执行一行\n\n\n![ani4.jpg](https://www.xiaohai-learn.pub/image/blogimgs/vg51l9uoun-ani4.jpg)','### 概念\njs预编译时会创建GO对象与AO对象\n![admin.png](http://localhost:8889/blogimgs/g25uf67gIp-admin.png)\n- GO： global object 即全局上下文, GO=window对象，GO即操作window\n\n- AO :   activation object 活跃对象，函数上下文,在函数执行之前进行的一个步骤\n\n\n**AO步骤**：\n1.　创建AO（Activation Object）对象，又叫执行期上下文；\n2.　寻找形式参数和变量声明作为AO的属性名，并赋值为undefined；\n3.　将实参值和形参统一；\n4.　在函数体内寻找==函数声明==，放入作为AO的属性，并赋值为其函数体。\n\n**GO步骤：**\n1.　创建GO（Global Object）对象；\n2.　寻找变量声明作为GO的属性名，并赋值为undefined；\n3.　寻找函数声明，放入作为GO的属性，并赋值为其函数体。\n\n### 正文\n*AO例题 1*\n```javascript\nfunction fun(a){\n    console.log(a);\n    var a = 123;\n    console.log(a);\n    function a(){};\n    console.log(a);\n    var b = function(){};\n    console.log(b);\n    function d(){};\n}\nfun(1)\n```\n函数预编译过程:\n1. 创建AO对象（Activation Object 执行期上下文）\n2. 找到形参和变量声明，并将形参和变量名作为AO对象属性名，值为undefined\n```\nAO{\n     a ：undefined\n     b ：undefined\n}\n```\n\n3. 将实参值和形参统一\n```\nAO{\n     a ：1\n     b ：undefined\n}\n```\n\n4. 找函数体里的函数声明(==b不是哦，是函数变量==)，值赋予函数体\n```\nAO{\n     a ：function a() {}\n     b ：undefined\n     d ：function d() {}\n}\n```\n接下来看执行：\n\n```javascript\nfunction fun(a){\n  console.log(a);         //(1)  \n  var a = 123;            //(2)\n  console.log(a);         //(3)\n  function a(){};         //(4)\n  console.log(a);         //(5)\n  var b = function(){};   //(6)\n  console.log(b);         //(7)\n  function d(){};         //(8)\n}\nfun(1)\n```\n(1) 去AO对象里输出a ![AO11.png](https://www.xiaohai-learn.pub/image/blogimgs/sTZdNQnm04-AO1-1.png)\n(2) a的声明以及声明过了，所以不用去看，后面是对a的赋值,同时，AO 对象改变\n```\nAO{\n     a ：123\n     b ：undefined\n     d ：function d() {}\n}\n```\n(3) 去AO对象里找到a，并打印 ![AO123.png](https://www.xiaohai-learn.pub/image/blogimgs/536aG2171w-AO1-2&3.png)\n(4) 预编译处理过了，所以不看了\n(5) 还是去AO里面找到a，打印出123 ![AO123.png](https://www.xiaohai-learn.pub/image/blogimgs/536aG2171w-AO1-2&3.png)\n(6) 声明b预编译已经处理过了，所以看后面对b的赋值，同时AO对象改变\n```\nAO{\n     a ：123\n     b ：function() {} \n     d ：function d() {}\n}\n```\n(7) 去AO里面找到b，并且输出 ![AO14.png](https://www.xiaohai-learn.pub/image/blogimgs/um5GBG7YG0-AO1-4.png)\n(8) 预编译处理过了，所以不看了\n\n整体的输出是：\n![AO1.png](https://www.xiaohai-learn.pub/image/blogimgs/hpgO8wi7HC-AO1.png)\n\n*AO例题 2*\n```javascript\nfunction test(a,b){\n  console.log(a);\n  c = 0;\n  var c;\n  a = 3;\n  b = 2;\n  console.log(b);\n  function b(){};\n  function d(){};\n  console.log(b);\n}\ntest(1)\n\n//1\n//2\n//2\n```\n*AO例题 3*\n```javascript\nfunction test(a,b){\n  console.log(a);\n  console.log(b);\n  var b = 234;\n  console.log(b);\n  a = 123;\n  console.log(a);\n  function a(){};\n  var a;\n  b = 234;\n  var b = function (){};\n  console.log(a);\n  console.log(b);\n}\ntest(1)\n\n//f a(){}\n//undefined\n//234\n//123\n//123\n//f (){}\n```\n\n*GO例题 1*\n```javascript\nvar a = 123;\nfunction a(){};\nconsole.log(a);\n\n//123\n```\n*GO例题 2*\n```javascript\nconsole.log(test);\nfunction test(test){\n  console.log(test);\n  var test = 234;\n  console.log(test);\n  function test(){};\n}\ntest(1)\nvar test = 123;\n\n//f test(test){...}\n//f test(){}\n//234\n```\n*GO例题 3*\n```javascript\nglobal = 100;\nfunction fn (){\n  console.log(global);\n  global = 200;\n  console.log(global);\n  var global = 300;\n}\nfn();\nvar global;\n\n//undefined\n//200\n```\n*GO例题 4*\n```javascript\nfunction test(){\n  console.log(b);\n  if(a){\n    var b = 100;\n  }\n  c = 234;\n  console.log(c);\n}\nvar a;\ntest();\nconsole.log(c);\n\n//undefined\n//234\n//234\n```\n> ==预编译不管if的判断，打破if，里面声明的变量，该声明还是要声明(即使换成if(false){} ,也还是会编译里面的内容)==\n\n*GO例题 5*\n```javascript\nvar x = 1,y = z = 0;\nfunction add(n){\n  return n = n+1;\n}\ny = add(x)\nfunction add(n){\n  return n = n+3;\n}\nz = add(x);\n\n\n//x -> 1\n//y -> 4\n//z -> 4\n```\n\n> 原文来自[JS预编译](https://blog.csdn.net/VVVZCS/article/details/81867287?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-81867287-blog-111665091.pc_relevant_antiscanv3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-81867287-blog-111665091.pc_relevant_antiscanv3&utm_relevant_index=5)，有删改\n\n\n\n\n\n\n\n\n\n','JavaScript','技术帖',1,12,1,0,'','','xiaohai','','','/blogimgs/sTZdNQnm04-AO1-1.png,/blogimgs/536aG2171w-AO1-2&3.png,/blogimgs/um5GBG7YG0-AO1-4.png,/blogimgs/hpgO8wi7HC-AO1.png,/blogimgs/g25uf67gIp-admin.png,',1,'2022-06-12 23:50:51','2022-09-06 04:49:27'),(10020,'疫情信息展示app','/blogimgs/W6l3GK01GH-admin.png,','国内有很多新闻媒体都有类似的疫情信息板块，例如腾讯、百度、头条、搜狐等等，因此我也萌生了制作信息查询网站的想法。使用==uniapp==，可以做到一次开发，多端打包，方便快速，经过几天开发完成了。h5 端可以访问 [http://news.xiaohai-learn.pub](http://news.xiaohai-learn.pub) ，小程序正在审核中...\n代码已上传 github [cov19news](https://github.com/hujie1999/cov19news)\n![admin.png](http://localhost:8889/blogimgs/W6l3GK01GH-admin.png)\n![all.png](https://www.xiaohai-learn.pub/image/blogimgs/5X0Tyi5Pb0-all.png)','### 说明\n- 这个项目首先要处理数据源的问题，搜了下网上有很多自己的api，但是都不靠谱，一旦人家服务器停了，自己的项目基本也就没用了，换接口很麻烦的；因此，需要找一些权威的，稳定的，网上大厂web端疫情板块就是很好的选择，但是有些是使用ssr渲染的，接口看不到，需要去筛选下，最终确定了腾讯新闻疫情板块 [https://news.qq.com/zt2020/page/feiyan.htm#/](https://news.qq.com/zt2020/page/feiyan.htm#/)\n\n\n- 二一个是接口文档的问题，腾讯新闻疫情板块接口倒是都可以访问，但是这些接口都是人家内部开发使用的，网上公开的接口返回的直接是所有数据（而且不完全，例如图表数据就没有），当然可以自己写一个服务器，解析到所有数据保存处理，分配到对应自定义请求接口，但是也太麻烦了（主要也是不想写服务器），还要定时去更新数据，那么就只有去解析他们内部接口了\n\n\n- 内部接口解析，就只能一步一步对应渲染的页面，去看每个接口的参数，返回值了，这一步挺麻烦的，幸好接口不是太多，解析完成了，有时间整理个接口文档发布出来。。。\n\n### 正文\n\n1.**用到的接口封装**\n```javascript\nimport http from \"./http.js\"\n\n//header\nconst header = {\n	\"content-type\":\"application/x-www-form-urlencoded\"\n}\n\n//获取本土疫情(diseaseh5Shelf){areaTree,chinaAdd,chinaTotal}和 疫情速报(localCityNCOVDataList)\nexport const getLocalCOVAndNewCOV = () =>{\n	const data = {\n		\'modules\': \'localCityNCOVDataList,diseaseh5Shelf\'\n	}\n	return http.post(\'/query/inner/publish/modules/list\',data,header)\n}\n\n//获取现有本土确诊&本土无症状（chinaDayListNew）和 新增 本土确诊&本土无症状（chinaDayAddListNew）数据\n//数据用于渲染echarts\n//参数（必须）limit  （default 30：30天   可选 ：60  90 182 365 ）\nexport const getNowDiseaseCaseAndAddDiseaseCase = (limit) => {\n	const data = {\n		\'modules\': \'chinaDayListNew,chinaDayAddListNew\',\n		\'limit\': limit\n	}\n	return http.post(\'/query/inner/publish/modules/list\',data,header)\n}\n//全球疫情数据 FAutoCountryConfirmAdd,WomWorld,WomAboard\nexport const getForeignCountryCOV = () =>{\n	const data = {\n		\'modules\': \'FAutoCountryConfirmAdd,WomWorld,WomAboard\'\n	}\n	return http.post(\'/automation/modules/list\',data,header)\n}\n\n//根据 adCode（地区码）获取 limit 条疫情数据\nexport const getLocalCOVDataByAdcode = (adCode) =>{\n	//limit 默认30条\n	return http.get(`/query/pubished/daily/list?adCode=${adCode}&limit=30`)\n}\n```\n大概这几条就够了，有些接口，比如渲染地图的数据因为没用到，所以不封装了\n\n2. **coding，**\n\n uniapp有一些限制和语法区别不同于web端开发，查阅开发者社区写就行了。。。\n\n3.图表使用\n\n图表方面使用的是echarts，因为我之前封装过echarts( 传送：[Vue封装ECharts](https://xiaohai-learn.pub/details?Blog_Id=10005) )，因此就拿来用了，当然稍微改了下，例如 div标签改成view...这里还有一个问题，就是原始的echarts，获取dom 必须使用 doocument.getElementById 这类浏览器支持的方法 (vue 的ref也可以)，但是微信小程序不可以，因为微信小程序不同于浏览器环境，他有自己的获取dom的方法，可是这种方法与echarts要求的冲突!网上搜了下，说的是只能使用二次开发echarts库。。。。\n\n4. **组件封装**\n\n\n这个项目ui样式是按照腾讯新闻疫情板块设计的，他们的列表，按钮等都不是现成的，需要按照样式自己写，这个很麻烦，而且因为运行环境不同，很多组件都不能通用，所以基本上浏览器上使用的标签组件都要自己写\n\n4. 1. *自定义Table封装(css省略)*\n```javascript\n<template>\n	<view class=\"table-container\"\n	:key=\"initKey\"\n	>\n		<view class=\"table-header\">\n			<view class=\"table-header-item\"\n			v-for=\"(item,index) in headerList\"\n			:key=\"index\"\n			:style=\"{\'width\': \'calc( 95vw / 24 * \'+item.width+\' ) !important\'}\"\n			>	\n				<text>{{item.label[0]}}</text>\n				<text v-if=\"item.label.length>1\">{{item.label[1]}}</text>\n			</view>\n		</view>\n		<view class=\"table-body\">\n			<view class=\"table-body-item\"\n			v-for=\"(item,index) in headerList\"\n			:key=\"item.name\"\n			>\n				<view class=\"table-item-cell\"\n				v-for=\"(it,ind) in dataList\"\n				:key=\"ind\"\n				:style=\"{\'width\': \'calc( 95vw / 24 * \'+item.width+\' ) !important\'}\"\n				>	\n					<view>\n						<text class=\"arrow\" v-if=\"index === 0\">></text>\n						<text>{{Object.values(it)[index]}}</text>\n						<text class=\"arrow\" v-if=\"index === headerList.length-1\">></text>\n					</view>\n				</view>\n			</view>\n		</view>\n	</view>\n</template>\n\n<script>\n	export default {\n		name:\"CustomTable\",\n		data() {\n			return {\n				\n			};\n		},\n		computed: {\n			initKey(){\n				return new Date().getTime()\n			}\n		},\n		props:{\n			headerList:{\n				type: Array,\n				default: ()=>[]\n			},\n			dataList: {\n				type: Array,\n				default: ()=>[]\n			}\n		}\n	}\n</script>\n<style lang=\"less\">\n\n</style>\n```\n\n4. 2. *自定义Select封装(css省略)*\n```javascript\n<template>\n	<view class=\"select\">\n		<view class=\"select-main\">\n			<view class=\"\" @click=\'showList()\'>\n				<slot name=\"component\">\n				</slot>\n			</view>\n		</view>\n		\n		<view v-if=\"show\" class=\"list\">\n			<view class=\"select-list\"\n			v-for=\"(item,index) in selectData\"\n			:key=\"index\"\n			>\n				<view class=\"select-list-item\"\n				@click=\"handleSelectVal(item)\"\n				:class=\"{\'select-active\':activeIndex === index}\"\n				>\n					{{item.name}}\n				</view>\n			</view>\n		</view>\n	</view>\n</template>\n\n<script>\n	export default {\n		name:\"CustomSelect\",\n		data() {\n			return {\n				show: false\n			};\n		},\n		props:{\n			selectData:{\n				type: Array,\n				default: ()=>[]\n			},\n			activeIndex:{\n				type: Number,\n				default: 0\n			}\n		},\n		methods:{\n			showList(){\n				this.show = !this.show\n				// console.log(\'123456\');\n			},\n			handleSelectVal(obj){\n				this.$emit(\'transSelectVal\',obj)\n				this.show = false\n			}\n		}\n	}\n</script>\n```\n\n5. **最后就是配置打包上传部署了**\n\n### 项目截图\n\n1. ![app1.png](https://www.xiaohai-learn.pub/image/blogimgs/G4650C9486-app1.png)\n\n2. ![app2.png](https://www.xiaohai-learn.pub/image/blogimgs/B81XV9MA7q-app2.png)\n3. ![app3.png](https://www.xiaohai-learn.pub/image/blogimgs/oc0X9l2geq-app3.png)\n4. ![app4.png](https://www.xiaohai-learn.pub/image/blogimgs/N257d9kd1G-app4.png)\n5. ![app5.png](https://www.xiaohai-learn.pub/image/blogimgs/lwlPSzKWz4-app5.png)','JavaScript,uniapp','实验',0,23,0,0,'','','xiaohai','','','/blogimgs/G4650C9486-app1.png,/blogimgs/B81XV9MA7q-app2.png,/blogimgs/oc0X9l2geq-app3.png,/blogimgs/N257d9kd1G-app4.png,/blogimgs/lwlPSzKWz4-app5.png,',1,'2022-06-21 10:02:38','2022-09-06 04:07:15');
/*!40000 ALTER TABLE `blogs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments_blogs`
--

DROP TABLE IF EXISTS `comments_blogs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `comments_blogs` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Blog_Id` int NOT NULL,
  `Blog_Title` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Comment_Level` int NOT NULL,
  `Root_Comment_Id` char(20) NOT NULL,
  `Father_Comment_Id` char(20) NOT NULL,
  `Comment_Id` char(20) NOT NULL,
  `Comment_Person_Role` char(10) NOT NULL,
  `Comment_Person_Id` char(20) NOT NULL,
  `Comment_Person_Acc` char(15) NOT NULL,
  `Comment_Person_Name` char(15) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Comment_Person_Avatar` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Parent_Person_Role` char(10) NOT NULL,
  `Parent_Person_Acc` char(15) NOT NULL,
  `Parent_Person_Name` char(15) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Parent_Person_Id` char(20) NOT NULL,
  `Parent_Person_Avatar` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Comment_Content` varchar(1000) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `IsRead` int NOT NULL DEFAULT '0',
  `IsClear` int NOT NULL DEFAULT '0',
  `Likes_Count` int NOT NULL DEFAULT '0',
  `Comment_Status` int NOT NULL DEFAULT '1',
  `Top_Status` int NOT NULL DEFAULT '0',
  `Comment_Examined` int NOT NULL DEFAULT '0',
  `Comment_Examined_Person_Role` char(10) NOT NULL,
  `Comment_Examined_Person_UniqueId` char(20) NOT NULL,
  `Comment_Examined_Person_Account` char(15) NOT NULL,
  `Comment_Examined_Person_NickNme` char(15) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Comment_Report` int NOT NULL DEFAULT '0',
  `Create_Time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments_blogs`
--

LOCK TABLES `comments_blogs` WRITE;
/*!40000 ALTER TABLE `comments_blogs` DISABLE KEYS */;
INSERT INTO `comments_blogs` VALUES (1,10015,'无痛刷新Token后续（后端）',1,'','','580qsD3b0MIdDptQ','Tourist','KlHsd7hG7dKaSimz','o857554Lu3U6Ihw','游客DIETG94vxQ','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','此博客第一条游客评论，测试Notification功能',1,0,0,1,0,1,'','','','',0,'2022-04-11 13:52:21'),(2,10015,'无痛刷新Token后续（后端）',2,'580qsD3b0MIdDptQ','580qsD3b0MIdDptQ','1HWxK5v5Rp7qU1P4','Admin','22MEbKoWMZgXCoVe','xiaohai1999','xiaohai','/avatars/p3DAnVhI7e-github_logo2.jpg','Tourist','o857554Lu3U6Ihw','游客DIETG94vxQ','KlHsd7hG7dKaSimz','','你好游客，我收到了这条信息',0,0,0,1,0,1,'','','','',0,'2022-04-11 13:56:41'),(3,10014,'无痛刷新Token',1,'','','gdq5t1rN6GkPsQ7A','Tourist','KlHsd7hG7dKaSimz','o857554Lu3U6Ihw','游客DIETG94vxQ','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','hello~',1,0,0,1,0,1,'','','','',0,'2022-04-11 14:03:06'),(4,10014,'无痛刷新Token',2,'gdq5t1rN6GkPsQ7A','gdq5t1rN6GkPsQ7A','0nC5Pu7daH9c2Ge4','Admin','22MEbKoWMZgXCoVe','xiaohai1999','xiaohai','/avatars/p3DAnVhI7e-github_logo2.jpg','Tourist','o857554Lu3U6Ihw','游客DIETG94vxQ','KlHsd7hG7dKaSimz','','晚上好~',0,0,0,1,0,1,'','','','',0,'2022-04-11 14:03:56'),(5,10000,'广告图床',1,'','','kC9EYS0489SBd4N4','Tourist','33z6b928SaTcg1ZF','l52Gu53xnIXeGCy','游客xF4WWgbOxk','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','你好，这里是手机端留下的第一条评论',1,0,0,1,0,1,'','','','',0,'2022-04-16 11:48:33'),(6,10005,'Vue封装ECharts',1,'','','MLrkeD855a4357qR','User','9N4QwyT8ZmavURBP','newuser1','新用户1','/avatars/64qRMCAR8L-avatar40.jpg','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','???',1,0,0,1,0,1,'','','','',0,'2022-04-20 18:47:51'),(7,10005,'Vue封装ECharts',2,'MLrkeD855a4357qR','MLrkeD855a4357qR','80W07qBxrcmkUvKW','Tourist','th2QRU60blUVneY1','fGPgk41f4V2G1iy','游客hpv4E3oMGT','','User','newuser1','新用户1','9N4QwyT8ZmavURBP','/avatars/64qRMCAR8L-avatar40.jpg','？？怎么了啊',0,0,0,1,0,1,'','','','',0,'2022-04-21 09:48:23'),(8,10012,'js中 apply call bind 用法',1,'','','lAfto8Gq8N5vd339','Tourist','V4zx1Aivw35olQL0','OKyrA9X40PUNm76','游客9C5p0kU6rh','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','你好',1,0,0,1,0,1,'','','','',0,'2022-05-04 00:15:30'),(9,10013,'JavaScript中函数的防抖 (Debounce) 与节流 (Throttle)',1,'','','l6tE91h9VDNGusL6','Tourist','9baH3be7urIxu020','ZK19f2GI9So9U6H','游客BOgqGV9Kh9','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','1',1,0,0,1,0,1,'','','','',0,'2022-05-12 06:51:20'),(10,10013,'JavaScript中函数的防抖 (Debounce) 与节流 (Throttle)',1,'','','X538CsxpiG4U8C90','Tourist','9baH3be7urIxu020','ZK19f2GI9So9U6H','游客BOgqGV9Kh9','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','1',1,0,0,1,0,1,'','','','',0,'2022-05-12 06:51:23'),(11,10013,'JavaScript中函数的防抖 (Debounce) 与节流 (Throttle)',1,'','','AgcaEw5b1nU54isw','Tourist','9baH3be7urIxu020','ZK19f2GI9So9U6H','游客BOgqGV9Kh9','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','1',1,0,0,1,0,1,'','','','',0,'2022-05-12 06:51:26'),(12,10015,'无痛刷新Token后续（后端）',1,'','','Pet0MD0O6Xh34z6r','Tourist','m2s87xIEmWl4p3Vm','64WsC4392YaBmr0','游客i1L0Rmigh6','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','啊哈哈哈',1,0,0,1,0,1,'','','','',0,'2022-05-13 14:15:18'),(13,10012,'js中 apply call bind 用法',1,'','','GPvAxov5PDLRq73T','Admin','22MEbKoWMZgXCoVe','xiaohai1999','xiaohai','/avatars/p3DAnVhI7e-github_logo2.jpg','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','Array.prototype.slice.call(),详见https://blog.csdn.net/weixin_39337506/article/details/105232408?spm=1001.2014.3001.5501',1,0,0,1,0,1,'','','','',0,'2022-05-19 08:25:51'),(14,10005,'Vue封装ECharts',1,'','','4tV9G81ep2Tvlg4K','Tourist','rus5gA150lSGO79w','Q5572EP42qD0rX5','游客1Ss8yR6sI2','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','test',1,0,0,1,0,1,'','','','',0,'2022-05-21 14:14:37'),(15,10015,'无痛刷新Token后续（后端）',1,'','','d82F7GBkmI86Hm2w','Tourist','QLC8iI4uXd14a5ts','WLC736ieWT77503','游客gzz6npe9vg','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','123',1,0,0,1,0,1,'','','','',0,'2022-05-21 20:33:56'),(16,10015,'无痛刷新Token后续（后端）',2,'d82F7GBkmI86Hm2w','d82F7GBkmI86Hm2w','K8bMSCG1ft8I4FrG','Tourist','QLC8iI4uXd14a5ts','WLC736ieWT77503','游客gzz6npe9vg','','Tourist','WLC736ieWT77503','游客gzz6npe9vg','QLC8iI4uXd14a5ts','','123',0,0,0,1,0,1,'','','','',0,'2022-05-21 20:35:11'),(17,10015,'无痛刷新Token后续（后端）',2,'d82F7GBkmI86Hm2w','K8bMSCG1ft8I4FrG','1UOZ0Bkft8Nm2Q0h','Tourist','QLC8iI4uXd14a5ts','WLC736ieWT77503','游客gzz6npe9vg','','Tourist','WLC736ieWT77503','游客gzz6npe9vg','QLC8iI4uXd14a5ts','','123',0,0,0,1,0,1,'','','','',0,'2022-05-21 20:35:34'),(18,10015,'无痛刷新Token后续（后端）',2,'d82F7GBkmI86Hm2w','d82F7GBkmI86Hm2w','L0RNh9fwMNA0F72m','Tourist','QLC8iI4uXd14a5ts','WLC736ieWT77503','游客gzz6npe9vg','','Tourist','WLC736ieWT77503','游客gzz6npe9vg','QLC8iI4uXd14a5ts','','1',0,0,0,1,0,1,'','','','',0,'2022-05-21 20:35:52'),(19,10018,'Vue自定义指令 debounce throttle fixelement',1,'','','PBpA6MW38TOICQEu','Tourist','3n8iD60q3i61hIV3','3vD54ALGbYC441p','游客6ZTNA347z9','','','','xiaohai','','','请问你这个评论是怎么做的',0,0,0,1,0,0,'','','','',0,'2022-07-13 22:30:50'),(20,10018,'Vue自定义指令 debounce throttle fixelement',2,'PBpA6MW38TOICQEu','PBpA6MW38TOICQEu','2gq9Q8kvVbED4189','Admin','22MEbKoWMZgXCoVe','xiaohai1999','xiaohai','/avatars/p3DAnVhI7e-github_logo2.jpg','Tourist','3vD54ALGbYC441p','游客6ZTNA347z9','3n8iD60q3i61hIV3','','大概就是关联根评论id，父评论id和评论层级，评论模块有很多种实现方法，根据需求选择自己需要的就行..',0,0,0,1,0,0,'','','','',0,'2022-07-21 13:58:41'),(21,10018,'Vue自定义指令 debounce throttle fixelement',2,'PBpA6MW38TOICQEu','PBpA6MW38TOICQEu','LPt81424ZK6ggT21','Admin','22MEbKoWMZgXCoVe','xiaohai1999','xiaohai','/avatars/p3DAnVhI7e-github_logo2.jpg','Tourist','3vD54ALGbYC441p','游客6ZTNA347z9','3n8iD60q3i61hIV3','','我把前台，服务器，数据库代码都上传了，如果感兴趣的话可以看一下',0,0,0,1,0,0,'','','','',0,'2022-07-21 13:59:48');
/*!40000 ALTER TABLE `comments_blogs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments_message`
--

DROP TABLE IF EXISTS `comments_message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `comments_message` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Comment_Level` int NOT NULL,
  `Root_Comment_Id` char(20) NOT NULL,
  `Father_Comment_Id` char(20) NOT NULL,
  `Comment_Id` char(20) NOT NULL,
  `Comment_Person_Role` char(10) NOT NULL,
  `Comment_Person_Acc` char(15) NOT NULL,
  `Comment_Person_Name` char(15) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Comment_Person_Id` char(20) NOT NULL,
  `Comment_Person_Avatar` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Parent_Person_Role` char(10) NOT NULL,
  `Parent_Person_Acc` char(15) NOT NULL,
  `Parent_Person_Name` char(15) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Parent_Person_Id` char(20) NOT NULL,
  `Parent_Person_Avatar` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Comment_Content` varchar(1000) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `IsRead` int NOT NULL DEFAULT '0',
  `IsClear` int NOT NULL DEFAULT '0',
  `Likes_Count` int NOT NULL DEFAULT '0',
  `Comment_Status` int NOT NULL DEFAULT '1',
  `Top_Status` int NOT NULL DEFAULT '0',
  `Comment_Examined` int NOT NULL DEFAULT '0',
  `Comment_Examined_Person_Role` char(10) NOT NULL,
  `Comment_Examined_Person_UniqueId` char(20) NOT NULL,
  `Comment_Examined_Person_Account` char(15) NOT NULL,
  `Comment_Examined_Person_NickNme` char(15) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Comment_Report` int NOT NULL DEFAULT '0',
  `Create_Time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments_message`
--

LOCK TABLES `comments_message` WRITE;
/*!40000 ALTER TABLE `comments_message` DISABLE KEYS */;
INSERT INTO `comments_message` VALUES (1,1,'','','5hiW6L165DN0Yp9f','Tourist','uNIEPvh09oo0k00','游客fKo4p1h97Y','dwKSW3M1RYZX3T06','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','游客留言，第一条留言板评论',1,1,0,1,0,1,'','','','',0,'2022-04-11 13:50:01'),(2,1,'','','hg7Ziv767FV58Pc2','User','test01abc','Tester1','u4uFb5wP7scZTH2G','/avatars/Hrw8v92tkC-avatar9.jpg','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','用户登录留言测试',1,1,0,1,0,1,'','','','',0,'2022-04-11 14:05:13'),(3,2,'hg7Ziv767FV58Pc2','hg7Ziv767FV58Pc2','dA3GNqK6ByI2LU9G','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','User','test01abc','Tester1','u4uFb5wP7scZTH2G','/avatars/Hrw8v92tkC-avatar9.jpg','你好用户，我收到了你的信息，你可以在你的个人空间看到这条回复',1,0,0,1,0,1,'','','','',0,'2022-04-11 14:06:11'),(4,2,'hg7Ziv767FV58Pc2','dA3GNqK6ByI2LU9G','0pV0l3NdNWg18458','User','test01abc','Tester1','u4uFb5wP7scZTH2G','/avatars/Hrw8v92tkC-avatar9.jpg','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','yes！我收到了你的回复',1,1,0,1,0,1,'','','','',0,'2022-04-11 14:07:34'),(5,1,'','','fTqub3DUG7VnCHuc','Tourist','8VnnuhZA0uIaLl0','游客B4Qn4Nx6E6','q9Du5yqwn7A730MY','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','作者你好，我是游客，这条信息你会在一分钟内收到！',1,1,0,1,0,1,'','','','',0,'2022-04-14 15:11:48'),(6,2,'fTqub3DUG7VnCHuc','fTqub3DUG7VnCHuc','7Xtlhl20EwNyVmIE','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','Tourist','8VnnuhZA0uIaLl0','游客B4Qn4Nx6E6','q9Du5yqwn7A730MY','','好的，我收到了',0,0,0,1,0,1,'','','','',0,'2022-04-14 15:12:59'),(7,1,'','','4H26x68st59nn1Cc','Tourist','XYMl11BQofOosWM','游客Us13GlcYvF','yN6FsvsE22gdgxP6','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','https测试',1,1,0,1,0,1,'','','','',0,'2022-04-24 10:17:27'),(8,1,'','','CFDsyYvt4mIRFlHy','User','tom123','Tom','HS0i31iDx7yCePB7','/avatars/30TEYp3812-avatar16.jpg','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','hello',1,0,0,1,0,1,'','','','',0,'2022-04-25 06:42:26'),(9,1,'','','1pYSO4U8u6GMV7Yu','Tourist','50i4o4khbFr6Fq0','游客T9DtO6GWL1','8HoW3fYrm3VK3sgv','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','唉。。。',1,0,0,1,0,1,'','','','',0,'2022-05-09 02:37:00'),(10,1,'','','4MYqoXz9QdxIVQXB','Tourist','yHQek0xqfcSifNi','游客Y5FUg5gB19','z744Ink8nVPgMmDb','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','ceshi',1,0,0,1,0,1,'','','','',0,'2022-05-16 03:06:05'),(11,2,'4MYqoXz9QdxIVQXB','4MYqoXz9QdxIVQXB','8z323W0Ecd400xap','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','Tourist','yHQek0xqfcSifNi','游客Y5FUg5gB19','z744Ink8nVPgMmDb','','HAHA,你好，你是第一个给我评论的人，谢谢 A A',0,0,0,1,0,1,'','','','',0,'2022-05-16 11:56:12'),(12,2,'4MYqoXz9QdxIVQXB','8z323W0Ecd400xap','gB1Y6rlz1n2gqSqA','Tourist','50i4o4khbFr6Fq0','游客T9DtO6GWL1','8HoW3fYrm3VK3sgv','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','123',1,0,0,1,0,1,'','','','',0,'2022-05-19 07:22:24'),(13,1,'','','5nFb6v7I567w91Kn','User','adminuser','admin','dU3Gi8bgBX1cXGgE','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','前端是自己实现的么',1,0,0,1,0,1,'','','','',0,'2022-05-28 02:44:41'),(14,2,'5nFb6v7I567w91Kn','5nFb6v7I567w91Kn','N2u372YwM9EioVka','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','User','adminuser','admin','dU3Gi8bgBX1cXGgE','','是的，纯纯的vue+element',0,0,0,1,0,1,'','','','',0,'2022-05-28 13:43:28'),(15,2,'5hiW6L165DN0Yp9f','5hiW6L165DN0Yp9f','F81AC18sh7IK7KaG','Tourist','SUa1X68dVyH198L','游客p0y6Z9208I','7LSnsmLMu0aL0562','','Tourist','uNIEPvh09oo0k00','游客fKo4p1h97Y','dwKSW3M1RYZX3T06','','你好',0,0,0,1,0,0,'','','','',0,'2022-06-13 02:20:03'),(16,1,'','','qo216EGnO5yBmkWi','Tourist','SUa1X68dVyH198L','游客p0y6Z9208I','7LSnsmLMu0aL0562','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','hello',1,0,0,1,0,0,'','','','',0,'2022-06-13 02:20:38'),(17,2,'qo216EGnO5yBmkWi','qo216EGnO5yBmkWi','U2V9X6B38F2p720g','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','Tourist','SUa1X68dVyH198L','游客p0y6Z9208I','7LSnsmLMu0aL0562','','hi',0,0,0,1,0,0,'','','','',0,'2022-06-13 15:35:08'),(18,1,'','','VlWEd6iSGfp6ha5X','Tourist','glp2w4L5h73lEZ1','游客etf725v7EB','hW7Cw81K128SG831','','Admin','xiaohai1999','xiaohai','22MEbKoWMZgXCoVe','/avatars/p3DAnVhI7e-github_logo2.jpg','请问响应式是怎么实现的呢\n',1,0,0,1,0,0,'','','','',0,'2022-07-22 13:09:28'),(19,2,'VlWEd6iSGfp6ha5X','VlWEd6iSGfp6ha5X','6Tt4g9AP79HMz60Y','Tourist','bka7R1TtsWbfC23','游客WXrogDiDU6','63Gizdmmqserusx0','','Tourist','glp2w4L5h73lEZ1','游客etf725v7EB','hW7Cw81K128SG831','','我这里使用的媒体查询',0,0,0,1,0,0,'','','','',0,'2022-07-26 05:34:25'),(20,2,'VlWEd6iSGfp6ha5X','6Tt4g9AP79HMz60Y','8rUYHUgFY1gh8aG9','Tourist','glp2w4L5h73lEZ1','游客etf725v7EB','hW7Cw81K128SG831','','Tourist','bka7R1TtsWbfC23','游客WXrogDiDU6','63Gizdmmqserusx0','','感觉媒体查询有点麻烦\n',0,0,0,1,0,0,'','','','',0,'2022-07-27 01:38:21'),(21,2,'VlWEd6iSGfp6ha5X','8rUYHUgFY1gh8aG9','zL2PXKCVba72P3Z6','Tourist','bka7R1TtsWbfC23','游客WXrogDiDU6','63Gizdmmqserusx0','','Tourist','glp2w4L5h73lEZ1','游客etf725v7EB','hW7Cw81K128SG831','','其实我想练习一下才用的，很多框架都有响应式，开箱即用',0,0,0,1,0,0,'','','','',0,'2022-07-31 06:35:03');
/*!40000 ALTER TABLE `comments_message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `friendlink`
--

DROP TABLE IF EXISTS `friendlink`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `friendlink` (
  `id` int NOT NULL AUTO_INCREMENT,
  `FriendWebAvatar` varchar(500) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `FriendWebName` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `FriendWebDesc` varchar(100) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `FriendWebLink` varchar(500) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `FriendName` char(20) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `LinkStatus` int NOT NULL DEFAULT '1',
  `LinkCreatTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LinkUpdateTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `friendlink`
--

LOCK TABLES `friendlink` WRITE;
/*!40000 ALTER TABLE `friendlink` DISABLE KEYS */;
INSERT INTO `friendlink` VALUES (1,'https://www.xiaohai-learn.pub/image/avatars/0r5YES27ac-avatar20.jpg','小海的博客 O.O','哈哈哈哈哈哈哈哈哈','https://xiaohai-learn.pub','HJ',1,'2022-05-12 01:17:32','2022-05-12 01:19:47'),(2,'https://www.xiaohai-learn.pub/image/avatars/7MfohS3Ztt-github_logo1.jpg','github','GitHub is a development platform inspired by the way you work.','https://github.com','unknow',1,'2022-05-12 01:33:57','2022-05-12 02:04:29'),(3,'https://mangoya.cn/v1/resources/2021-09-18/head-6c5b18517fab1531c0e5d040e955c881.jpg','aimee','mangoya.cn','https://mangoya.cn/#/','',1,'2022-05-14 14:32:36','2022-05-14 14:32:36'),(4,'https://nekodeng.gitee.io/medias/avatar.jpg','itsNeko','十万伏特皮卡丘','https://dyfa.top','',1,'2022-05-14 14:57:18','2022-05-14 14:57:18'),(5,'https://www.w2l.ink/img/logo.png','陈俊羽 \'s Blog','太阳再远，踮起脚尖也能靠近阳光','https://www.w2l.ink/','',1,'2022-06-01 10:51:54','2022-06-01 10:51:54');
/*!40000 ALTER TABLE `friendlink` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `message`
--

DROP TABLE IF EXISTS `message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `message` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Message_Title` varchar(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Message_Content` text CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Message_Img` text CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Message_Status` int NOT NULL DEFAULT '1',
  `Message_Author_Role` char(10) NOT NULL,
  `Message_Author_UniqueId` char(20) NOT NULL,
  `Message_Author` char(15) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Message_Author_Account` char(15) NOT NULL,
  `Message_Author_Avatar` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Message_Createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Message_Updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `message`
--

LOCK TABLES `message` WRITE;
/*!40000 ALTER TABLE `message` DISABLE KEYS */;
INSERT INTO `message` VALUES (1,'Message Stone','![ani1.jpg](https://www.xiaohai-learn.pub/image/messageimgs/7ol236k4hW-ani1.jpg)\n *欢迎留言..*\n\n\n\n*加友链按此格式留言就行* : )\n\n```javascript\n{\n  name: \'小海的博客\'\n\n  url: \'https://xiaohai-learn.pub\'\n\n  avatar: \'https://www.xiaohai-learn.pub/image/avatars/onRgqFK87y-logo_1.jpg\'\n\n  desc: \'哈哈哈哈哈哈哈哈\'\n}\n\n这个 StackOverflow 主题有感觉不 o.o\n\n\n```\n\n>这个网站前后台包括服务器都已经开源了，地址 [源代码](https://github.com/hujie1999)','/messageimgs/7ol236k4hW-ani1.jpg,',1,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','/avatars/p3DAnVhI7e-github_logo2.jpg','2022-02-11 05:39:31','2022-08-26 14:16:03');
/*!40000 ALTER TABLE `message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_table`
--

DROP TABLE IF EXISTS `user_table`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_table` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Role` char(10) NOT NULL DEFAULT 'User',
  `User_UniqueId` char(20) NOT NULL,
  `User_Nickname` char(15) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `User_Account` char(15) NOT NULL,
  `User_Password` char(20) NOT NULL,
  `User_Avatar` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `User_Gender` int NOT NULL,
  `User_Email` char(30) NOT NULL,
  `User_PhoneNumber` char(14) NOT NULL,
  `User_Introduction` char(50) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `User_Status` int NOT NULL DEFAULT '1',
  `User_Examined` int NOT NULL DEFAULT '0',
  `User_Examined_Person_Role` char(10) NOT NULL,
  `User_Examined_Person_Id` char(20) NOT NULL,
  `User_Examined_Person_Acc` char(15) NOT NULL,
  `User_Examined_Person_Name` char(15) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `User_Unread` text CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `User_Unread_Count` int NOT NULL DEFAULT '0',
  `User_Collection` text NOT NULL,
  `User_CreateTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `User_UpdateTime` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_table`
--

LOCK TABLES `user_table` WRITE;
/*!40000 ALTER TABLE `user_table` DISABLE KEYS */;
INSERT INTO `user_table` VALUES (1,'Admin','22MEbKoWMZgXCoVe','xiaohai','xiaohai1999','123456','/avatars/p3DAnVhI7e-github_logo2.jpg',1,'1256215927@qq.com','18282727137','大家好，我叫小海',1,1,'','','','','',0,',10019','2022-03-07 12:55:22','2022-08-26 14:16:03'),(2,'User','Qe83s2xQRrtcppfY','xiaohong','xiaohong123','123456','',0,'1256215927@qq.com','10086','大家好，我叫小红',1,1,'','','','','',0,'','2022-03-07 12:55:22','2022-04-15 13:29:25'),(3,'User','tGeXOI6snN5BDf92','xiaoming','xiaoming123','123456','/avatars/R2CG2iaTGb-avatar47.jpg',0,'1256215927@qq.com','10000','用户编辑测试',1,1,'','','','','',0,'','2022-03-07 12:55:22','2022-04-20 18:43:27'),(4,'User','u4uFb5wP7scZTH2G','Tester1','test01abc','123456','/avatars/Hrw8v92tkC-avatar9.jpg',1,'123456@qq.com','1008611','大家好。。。',1,1,'','','','','',0,',10009,10008,10001,10011,10002,10014','2022-03-21 11:31:58','2022-05-23 11:26:04'),(5,'User','9N4QwyT8ZmavURBP','新用户1','newuser1','123456','/avatars/64qRMCAR8L-avatar40.jpg',2,'123456@qq.com','','',1,1,'','','','','',0,'','2022-03-21 12:09:12','2022-04-20 18:44:34'),(6,'User','d5a0a12pAq5GqLoV','测试者2','test02abc','123456','',0,'123456@qq.com','1008611','hello',1,0,'','','','','',0,'','2022-04-08 06:47:07','0000-00-00 00:00:00'),(7,'User','HS0i31iDx7yCePB7','Tom','tom123','123456','/avatars/30TEYp3812-avatar16.jpg',0,'123456@qq.com','','',1,0,'','','','','',0,'','2022-04-25 06:40:38','2022-04-25 06:41:48'),(8,'User','dlm3l875gVo4v0D6','阿斯顿','qweasd','123456a','',0,'asd@qq.com','','',1,1,'','','','','',0,'','2022-04-27 02:21:31','2022-05-31 09:16:14'),(9,'User','dU3Gi8bgBX1cXGgE','admin','adminuser','123456','',0,'1336330090@qq.com','','',1,1,'','','','','',0,'','2022-05-28 02:40:22','2022-05-28 13:50:57');
/*!40000 ALTER TABLE `user_table` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `view_data`
--

DROP TABLE IF EXISTS `view_data`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `view_data` (
  `id` int NOT NULL AUTO_INCREMENT,
  `total_view` int NOT NULL DEFAULT '0',
  `user_view` int NOT NULL DEFAULT '0',
  `tourist_view` int NOT NULL DEFAULT '0',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `view_data`
--

LOCK TABLES `view_data` WRITE;
/*!40000 ALTER TABLE `view_data` DISABLE KEYS */;
INSERT INTO `view_data` VALUES (1,5,1,4,'2022-08-27 22:12:17'),(2,5,2,3,'2022-08-27 22:15:00'),(3,1,1,0,'2022-08-28 22:15:00'),(4,12,2,10,'2022-08-28 23:10:45'),(5,25,12,13,'2022-08-28 23:10:58'),(6,14,5,9,'2022-08-28 23:11:18');
/*!40000 ALTER TABLE `view_data` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `website`
--

DROP TABLE IF EXISTS `website`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `website` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Tag_List` varchar(100) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Class_List` char(100) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Right_List` text NOT NULL,
  `Tab_List` text NOT NULL,
  `Avatars` text CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Backgroung_Img` char(150) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,
  `Viewer_Count` int NOT NULL,
  `Likes_Count` int NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `website`
--

LOCK TABLES `website` WRITE;
/*!40000 ALTER TABLE `website` DISABLE KEYS */;
INSERT INTO `website` VALUES (1,'Vue,React,Nodejs,Java,JavaScript,SpringBoot,Python,WebSocket,uniapp','技术帖,日记,随笔,实验,总结','','','/avatars/p3DAnVhI7e-github_logo2.jpg,/avatars/QKbAy2c51G-logo2.jpg,','/backgroundimgs/Ets241vBg7-flower_1.jpg,',2186,0);
/*!40000 ALTER TABLE `website` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-09-06 13:33:26
